//
// File generated by rootcint at Mon Mar 23 12:13:44 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME eventdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyEvtId_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyEvtId(void *p = 0);
   static void *newArray_MyEvtId(Long_t size, void *p);
   static void delete_MyEvtId(void *p);
   static void deleteArray_MyEvtId(void *p);
   static void destruct_MyEvtId(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyEvtId*)
   {
      ::MyEvtId *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyEvtId >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyEvtId", ::MyEvtId::Class_Version(), "././MyEvtId.h", 8,
                  typeid(::MyEvtId), DefineBehavior(ptr, ptr),
                  &::MyEvtId::Dictionary, isa_proxy, 4,
                  sizeof(::MyEvtId) );
      instance.SetNew(&new_MyEvtId);
      instance.SetNewArray(&newArray_MyEvtId);
      instance.SetDelete(&delete_MyEvtId);
      instance.SetDeleteArray(&deleteArray_MyEvtId);
      instance.SetDestructor(&destruct_MyEvtId);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyEvtId*)
   {
      return GenerateInitInstanceLocal((::MyEvtId*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyEvtId*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPart(void *p = 0);
   static void *newArray_MyPart(Long_t size, void *p);
   static void delete_MyPart(void *p);
   static void deleteArray_MyPart(void *p);
   static void destruct_MyPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPart*)
   {
      ::MyPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPart", ::MyPart::Class_Version(), "././MyPart.h", 6,
                  typeid(::MyPart), DefineBehavior(ptr, ptr),
                  &::MyPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyPart) );
      instance.SetNew(&new_MyPart);
      instance.SetNewArray(&newArray_MyPart);
      instance.SetDelete(&delete_MyPart);
      instance.SetDeleteArray(&deleteArray_MyPart);
      instance.SetDestructor(&destruct_MyPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPart*)
   {
      return GenerateInitInstanceLocal((::MyPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenPart(void *p = 0);
   static void *newArray_MyGenPart(Long_t size, void *p);
   static void delete_MyGenPart(void *p);
   static void deleteArray_MyGenPart(void *p);
   static void destruct_MyGenPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenPart*)
   {
      ::MyGenPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenPart", ::MyGenPart::Class_Version(), "././MyGenPart.h", 8,
                  typeid(::MyGenPart), DefineBehavior(ptr, ptr),
                  &::MyGenPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenPart) );
      instance.SetNew(&new_MyGenPart);
      instance.SetNewArray(&newArray_MyGenPart);
      instance.SetDelete(&delete_MyGenPart);
      instance.SetDeleteArray(&deleteArray_MyGenPart);
      instance.SetDestructor(&destruct_MyGenPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenPart*)
   {
      return GenerateInitInstanceLocal((::MyGenPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyVertex(void *p = 0);
   static void *newArray_MyVertex(Long_t size, void *p);
   static void delete_MyVertex(void *p);
   static void deleteArray_MyVertex(void *p);
   static void destruct_MyVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyVertex*)
   {
      ::MyVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyVertex", ::MyVertex::Class_Version(), "././MyVertex.h", 6,
                  typeid(::MyVertex), DefineBehavior(ptr, ptr),
                  &::MyVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MyVertex) );
      instance.SetNew(&new_MyVertex);
      instance.SetNewArray(&newArray_MyVertex);
      instance.SetDelete(&delete_MyVertex);
      instance.SetDeleteArray(&deleteArray_MyVertex);
      instance.SetDestructor(&destruct_MyVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyVertex*)
   {
      return GenerateInitInstanceLocal((::MyVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MySimVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MySimVertex(void *p = 0);
   static void *newArray_MySimVertex(Long_t size, void *p);
   static void delete_MySimVertex(void *p);
   static void deleteArray_MySimVertex(void *p);
   static void destruct_MySimVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MySimVertex*)
   {
      ::MySimVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MySimVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MySimVertex", ::MySimVertex::Class_Version(), "././MySimVertex.h", 6,
                  typeid(::MySimVertex), DefineBehavior(ptr, ptr),
                  &::MySimVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MySimVertex) );
      instance.SetNew(&new_MySimVertex);
      instance.SetNewArray(&newArray_MySimVertex);
      instance.SetDelete(&delete_MySimVertex);
      instance.SetDeleteArray(&deleteArray_MySimVertex);
      instance.SetDestructor(&destruct_MySimVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MySimVertex*)
   {
      return GenerateInitInstanceLocal((::MySimVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MySimVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyBeamSpot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyBeamSpot(void *p = 0);
   static void *newArray_MyBeamSpot(Long_t size, void *p);
   static void delete_MyBeamSpot(void *p);
   static void deleteArray_MyBeamSpot(void *p);
   static void destruct_MyBeamSpot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyBeamSpot*)
   {
      ::MyBeamSpot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyBeamSpot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyBeamSpot", ::MyBeamSpot::Class_Version(), "././MyBeamSpot.h", 6,
                  typeid(::MyBeamSpot), DefineBehavior(ptr, ptr),
                  &::MyBeamSpot::Dictionary, isa_proxy, 4,
                  sizeof(::MyBeamSpot) );
      instance.SetNew(&new_MyBeamSpot);
      instance.SetNewArray(&newArray_MyBeamSpot);
      instance.SetDelete(&delete_MyBeamSpot);
      instance.SetDeleteArray(&deleteArray_MyBeamSpot);
      instance.SetDestructor(&destruct_MyBeamSpot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyBeamSpot*)
   {
      return GenerateInitInstanceLocal((::MyBeamSpot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr MyEvtId::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyEvtId::Class_Name()
{
   return "MyEvtId";
}

//______________________________________________________________________________
const char *MyEvtId::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyEvtId::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyEvtId::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyEvtId::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MyPart::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyPart::Class_Name()
{
   return "MyPart";
}

//______________________________________________________________________________
const char *MyPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPart::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MyGenPart::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenPart::Class_Name()
{
   return "MyGenPart";
}

//______________________________________________________________________________
const char *MyGenPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenPart::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MyVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyVertex::Class_Name()
{
   return "MyVertex";
}

//______________________________________________________________________________
const char *MyVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MySimVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MySimVertex::Class_Name()
{
   return "MySimVertex";
}

//______________________________________________________________________________
const char *MySimVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MySimVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MySimVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MySimVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MyBeamSpot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyBeamSpot::Class_Name()
{
   return "MyBeamSpot";
}

//______________________________________________________________________________
const char *MyBeamSpot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyBeamSpot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyBeamSpot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyBeamSpot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MyPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPart.
      TClass *R__cl = ::MyPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPart(void *p) {
      return  p ? new(p) ::MyPart : new ::MyPart;
   }
   static void *newArray_MyPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyPart[nElements] : new ::MyPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPart(void *p) {
      delete ((::MyPart*)p);
   }
   static void deleteArray_MyPart(void *p) {
      delete [] ((::MyPart*)p);
   }
   static void destruct_MyPart(void *p) {
      typedef ::MyPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPart

//______________________________________________________________________________
void MyEvtId::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyEvtId.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyEvtId::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyEvtId::Class(),this);
   }
}

//______________________________________________________________________________
void MyEvtId::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyEvtId.
      TClass *R__cl = ::MyEvtId::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Run", &Run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Evt", &Evt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LumiBlock", &LumiBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsData", &IsData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ExpType", &ExpType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bunch", &Bunch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Orbit", &Orbit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumi", &IstLumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumiErr", &IstLumiErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumiPerBX", &IstLumiPerBX);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyEvtId(void *p) {
      return  p ? new(p) ::MyEvtId : new ::MyEvtId;
   }
   static void *newArray_MyEvtId(Long_t nElements, void *p) {
      return p ? new(p) ::MyEvtId[nElements] : new ::MyEvtId[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyEvtId(void *p) {
      delete ((::MyEvtId*)p);
   }
   static void deleteArray_MyEvtId(void *p) {
      delete [] ((::MyEvtId*)p);
   }
   static void destruct_MyEvtId(void *p) {
      typedef ::MyEvtId current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyEvtId

//______________________________________________________________________________
void MyGenPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenPart.
      TClass *R__cl = ::MyGenPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&name);
      R__insp.InspectMember("string", (void*)&name, "name.", false);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenPart(void *p) {
      return  p ? new(p) ::MyGenPart : new ::MyGenPart;
   }
   static void *newArray_MyGenPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenPart[nElements] : new ::MyGenPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenPart(void *p) {
      delete ((::MyGenPart*)p);
   }
   static void deleteArray_MyGenPart(void *p) {
      delete [] ((::MyGenPart*)p);
   }
   static void destruct_MyGenPart(void *p) {
      typedef ::MyGenPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenPart

//______________________________________________________________________________
void MyBeamSpot::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyBeamSpot.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyBeamSpot::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyBeamSpot::Class(),this);
   }
}

//______________________________________________________________________________
void MyBeamSpot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyBeamSpot.
      TClass *R__cl = ::MyBeamSpot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaZ", &sigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esigmaZ", &esigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edxdz", &edxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edydz", &edydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthX", &BeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthY", &BeamWidthY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthX", &eBeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthY", &eBeamWidthY);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyBeamSpot(void *p) {
      return  p ? new(p) ::MyBeamSpot : new ::MyBeamSpot;
   }
   static void *newArray_MyBeamSpot(Long_t nElements, void *p) {
      return p ? new(p) ::MyBeamSpot[nElements] : new ::MyBeamSpot[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyBeamSpot(void *p) {
      delete ((::MyBeamSpot*)p);
   }
   static void deleteArray_MyBeamSpot(void *p) {
      delete [] ((::MyBeamSpot*)p);
   }
   static void destruct_MyBeamSpot(void *p) {
      typedef ::MyBeamSpot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyBeamSpot

//______________________________________________________________________________
void MyVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MyVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyVertex.
      TClass *R__cl = ::MyVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rho", &rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "erho", &erho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validity", &validity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fake", &fake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2n", &chi2n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGoodVertex", &isGoodVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntracks", &ntracks);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyVertex(void *p) {
      return  p ? new(p) ::MyVertex : new ::MyVertex;
   }
   static void *newArray_MyVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MyVertex[nElements] : new ::MyVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyVertex(void *p) {
      delete ((::MyVertex*)p);
   }
   static void deleteArray_MyVertex(void *p) {
      delete [] ((::MyVertex*)p);
   }
   static void destruct_MyVertex(void *p) {
      typedef ::MyVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyVertex

//______________________________________________________________________________
void MySimVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MySimVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MySimVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MySimVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MySimVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MySimVertex.
      TClass *R__cl = ::MySimVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MySimVertex(void *p) {
      return  p ? new(p) ::MySimVertex : new ::MySimVertex;
   }
   static void *newArray_MySimVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MySimVertex[nElements] : new ::MySimVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MySimVertex(void *p) {
      delete ((::MySimVertex*)p);
   }
   static void deleteArray_MySimVertex(void *p) {
      delete [] ((::MySimVertex*)p);
   }
   static void destruct_MySimVertex(void *p) {
      typedef ::MySimVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MySimVertex

namespace ROOT {
   void vectorlEMyGenPartgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenPartgR_Dictionary();
   static void *new_vectorlEMyGenPartgR(void *p = 0);
   static void *newArray_vectorlEMyGenPartgR(Long_t size, void *p);
   static void delete_vectorlEMyGenPartgR(void *p);
   static void deleteArray_vectorlEMyGenPartgR(void *p);
   static void destruct_vectorlEMyGenPartgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenPart>*)
   {
      vector<MyGenPart> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenPart>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenPart>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc491/lcg/root/5.34.22-cms3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenPart>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenPartgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenPart>) );
      instance.SetNew(&new_vectorlEMyGenPartgR);
      instance.SetNewArray(&newArray_vectorlEMyGenPartgR);
      instance.SetDelete(&delete_vectorlEMyGenPartgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenPartgR);
      instance.SetDestructor(&destruct_vectorlEMyGenPartgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenPart> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenPartgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenPartgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart> : new vector<MyGenPart>;
   }
   static void *newArray_vectorlEMyGenPartgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart>[nElements] : new vector<MyGenPart>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenPartgR(void *p) {
      delete ((vector<MyGenPart>*)p);
   }
   static void deleteArray_vectorlEMyGenPartgR(void *p) {
      delete [] ((vector<MyGenPart>*)p);
   }
   static void destruct_vectorlEMyGenPartgR(void *p) {
      typedef vector<MyGenPart> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenPart>

namespace ROOT {
   void vectorlEMyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyVertexgR_Dictionary();
   static void *new_vectorlEMyVertexgR(void *p = 0);
   static void *newArray_vectorlEMyVertexgR(Long_t size, void *p);
   static void delete_vectorlEMyVertexgR(void *p);
   static void deleteArray_vectorlEMyVertexgR(void *p);
   static void destruct_vectorlEMyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyVertex>*)
   {
      vector<MyVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyVertex>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc491/lcg/root/5.34.22-cms3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyVertex>) );
      instance.SetNew(&new_vectorlEMyVertexgR);
      instance.SetNewArray(&newArray_vectorlEMyVertexgR);
      instance.SetDelete(&delete_vectorlEMyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyVertexgR);
      instance.SetDestructor(&destruct_vectorlEMyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex> : new vector<MyVertex>;
   }
   static void *newArray_vectorlEMyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex>[nElements] : new vector<MyVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyVertexgR(void *p) {
      delete ((vector<MyVertex>*)p);
   }
   static void deleteArray_vectorlEMyVertexgR(void *p) {
      delete [] ((vector<MyVertex>*)p);
   }
   static void destruct_vectorlEMyVertexgR(void *p) {
      typedef vector<MyVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyVertex>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyEvtId */
static int G__eventdict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId[n];
     } else {
       p = new((void*) gvp) MyEvtId[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId;
     } else {
       p = new((void*) gvp) MyEvtId;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyEvtId::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyEvtId::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyEvtId::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyEvtId* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyEvtId(*(MyEvtId*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyEvtId G__TMyEvtId;
static int G__eventdict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyEvtId*) (soff+(sizeof(MyEvtId)*i)))->~G__TMyEvtId();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyEvtId*) (soff))->~G__TMyEvtId();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* dest = (MyEvtId*) G__getstructoffset();
   *dest = *(MyEvtId*) libp->para[0].ref;
   const MyEvtId& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPart */
static int G__eventdict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart[n];
     } else {
       p = new((void*) gvp) MyPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart;
     } else {
       p = new((void*) gvp) MyPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPart(*(MyPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPart G__TMyPart;
static int G__eventdict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPart*) (soff+(sizeof(MyPart)*i)))->~G__TMyPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPart*) (soff))->~G__TMyPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* dest = (MyPart*) G__getstructoffset();
   *dest = *(MyPart*) libp->para[0].ref;
   const MyPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenPart */
static int G__eventdict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart[n];
     } else {
       p = new((void*) gvp) MyGenPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart;
     } else {
       p = new((void*) gvp) MyGenPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenPart(*(MyGenPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenPart G__TMyGenPart;
static int G__eventdict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenPart*) (soff+(sizeof(MyGenPart)*i)))->~G__TMyGenPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenPart*) (soff))->~G__TMyGenPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* dest = (MyGenPart*) G__getstructoffset();
   *dest = *(MyGenPart*) libp->para[0].ref;
   const MyGenPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyVertex */
static int G__eventdict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex[n];
     } else {
       p = new((void*) gvp) MyVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex;
     } else {
       p = new((void*) gvp) MyVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyVertex(*(MyVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyVertex G__TMyVertex;
static int G__eventdict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyVertex*) (soff+(sizeof(MyVertex)*i)))->~G__TMyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyVertex*) (soff))->~G__TMyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* dest = (MyVertex*) G__getstructoffset();
   *dest = *(MyVertex*) libp->para[0].ref;
   const MyVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MySimVertex */
static int G__eventdict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex[n];
     } else {
       p = new((void*) gvp) MySimVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex;
     } else {
       p = new((void*) gvp) MySimVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MySimVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MySimVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MySimVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MySimVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MySimVertex(*(MySimVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MySimVertex G__TMySimVertex;
static int G__eventdict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MySimVertex*) (soff+(sizeof(MySimVertex)*i)))->~G__TMySimVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MySimVertex*) (soff))->~G__TMySimVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* dest = (MySimVertex*) G__getstructoffset();
   *dest = *(MySimVertex*) libp->para[0].ref;
   const MySimVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyBeamSpot */
static int G__eventdict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot[n];
     } else {
       p = new((void*) gvp) MyBeamSpot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot;
     } else {
       p = new((void*) gvp) MyBeamSpot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyBeamSpot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyBeamSpot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyBeamSpot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyBeamSpot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyBeamSpot(*(MyBeamSpot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyBeamSpot G__TMyBeamSpot;
static int G__eventdict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyBeamSpot*) (soff+(sizeof(MyBeamSpot)*i)))->~G__TMyBeamSpot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyBeamSpot*) (soff))->~G__TMyBeamSpot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* dest = (MyBeamSpot*) G__getstructoffset();
   *dest = *(MyBeamSpot*) libp->para[0].ref;
   const MyBeamSpot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenPart,allocator<MyGenPart> > */
static int G__eventdict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >::reference obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::const_reference obj = ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *((MyGenPart*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >::reference obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::const_reference obj = ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >;
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator=(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->reserve((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->push_back(*(MyGenPart*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->swap(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *(MyGenPart*) libp->para[1].ref);
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), (vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[1])
, *(MyGenPart*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenPart,allocator<MyGenPart> > G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR;
static int G__eventdict_232_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenPart,allocator<MyGenPart> >*) (soff+(sizeof(vector<MyGenPart,allocator<MyGenPart> >)*i)))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenPart,allocator<MyGenPart> >*) (soff))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyVertex,allocator<MyVertex> > */
static int G__eventdict_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *((MyVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >;
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator=(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->reserve((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->push_back(*(MyVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->swap(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *(MyVertex*) libp->para[1].ref);
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), (vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[1])
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyVertex,allocator<MyVertex> > G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR;
static int G__eventdict_236_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyVertex,allocator<MyVertex> >*) (soff+(sizeof(vector<MyVertex,allocator<MyVertex> >)*i)))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyVertex,allocator<MyVertex> >*) (soff))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyEvtId */

/* MyPart */

/* MyGenPart */

/* MyVertex */

/* MySimVertex */

/* MyBeamSpot */

/* vector<MyGenPart,allocator<MyGenPart> > */

/* vector<MyVertex,allocator<MyVertex> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyEvtId))) {
     MyEvtId *G__Lderived;
     G__Lderived=(MyEvtId*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPart))) {
     MyPart *G__Lderived;
     G__Lderived=(MyPart*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenPart))) {
     MyGenPart *G__Lderived;
     G__Lderived=(MyGenPart*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyVertex))) {
     MyVertex *G__Lderived;
     G__Lderived=(MyVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MySimVertex))) {
     MySimVertex *G__Lderived;
     G__Lderived=(MySimVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot))) {
     MyBeamSpot *G__Lderived;
     G__Lderived=(MyBeamSpot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenPart>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyEvtId */
static void G__setup_memvarMyEvtId(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   { MyEvtId *p; p=(MyEvtId*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Evt)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Evt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LumiBlock)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"LumiBlock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),109,0,0,-1,G__defined_typename("TimeValue_t"),-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsData)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ExpType)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ExpType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bunch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Bunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Orbit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Orbit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumiErr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumiErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumiPerBX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumiPerBX=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyPart */
static void G__setup_memvarMyPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   { MyPart *p; p=(MyPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenPart */
static void G__setup_memvarMyGenPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   { MyGenPart *p; p=(MyGenPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyVertex */
static void G__setup_memvarMyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   { MyVertex *p; p=(MyVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rho)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->erho)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"erho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validity)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"validity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGoodVertex)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isGoodVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MySimVertex */
static void G__setup_memvarMySimVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   { MySimVertex *p; p=(MySimVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyBeamSpot */
static void G__setup_memvarMyBeamSpot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   { MyBeamSpot *p; p=(MyBeamSpot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->esigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"esigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenPart,allocator<MyGenPart> > */
static void G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   { vector<MyGenPart,allocator<MyGenPart> > *p; p=(vector<MyGenPart,allocator<MyGenPart> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyVertex,allocator<MyVertex> > */
static void G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   { vector<MyVertex,allocator<MyVertex> > *p; p=(vector<MyVertex,allocator<MyVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyEvtId(void) {
   /* MyEvtId */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   G__memfunc_setup("MyEvtId",674,G__eventdict_168_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_168_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_168_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_168_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyEvtId::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_168_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_168_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyEvtId::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_168_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyEvtId::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_168_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_168_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_168_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyEvtId", 674, G__eventdict_168_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyEvtId", 800, G__eventdict_168_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_168_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPart(void) {
   /* MyPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   G__memfunc_setup("MyPart",605,G__eventdict_226_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_226_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_226_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_226_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPart", 605, G__eventdict_226_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPart", 731, G__eventdict_226_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_226_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenPart(void) {
   /* MyGenPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   G__memfunc_setup("MyGenPart",887,G__eventdict_227_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_227_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_227_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_227_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_227_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_227_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_227_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_227_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_227_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_227_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenPart", 887, G__eventdict_227_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenPart", 1013, G__eventdict_227_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_227_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyVertex(void) {
   /* MyVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   G__memfunc_setup("MyVertex",836,G__eventdict_228_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_228_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_228_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_228_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_228_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_228_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_228_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_228_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_228_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_228_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_228_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyVertex", 836, G__eventdict_228_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyVertex", 962, G__eventdict_228_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_228_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMySimVertex(void) {
   /* MySimVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   G__memfunc_setup("MySimVertex",1133,G__eventdict_229_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_229_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_229_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MySimVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_229_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_229_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MySimVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_229_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MySimVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_229_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_229_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_229_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_229_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_229_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MySimVertex", 1133, G__eventdict_229_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MySimVertex", 1259, G__eventdict_229_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_229_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 1, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyBeamSpot(void) {
   /* MyBeamSpot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   G__memfunc_setup("MyBeamSpot",993,G__eventdict_230_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_230_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_230_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyBeamSpot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_230_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_230_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyBeamSpot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_230_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyBeamSpot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_230_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_230_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_230_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_230_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_230_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyBeamSpot", 993, G__eventdict_230_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyBeamSpot", 1119, G__eventdict_230_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_230_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   /* vector<MyGenPart,allocator<MyGenPart> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_232_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_232_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_232_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_232_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_232_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_232_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_232_0_7, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_232_0_8, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_232_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_232_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz u 'MyGenPart' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_232_0_11, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_232_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_232_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_232_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_232_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_232_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n u 'MyGenPart' - 11 'MyGenPart()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_232_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_232_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_232_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_232_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_232_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_232_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_232_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_232_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_232_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_232_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first "
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_232_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n "
"u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_232_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_232_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_232_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_232_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenPart,allocator<MyGenPart> >", 3840, G__eventdict_232_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   /* vector<MyVertex,allocator<MyVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_236_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_236_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_236_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_236_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_236_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_236_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_236_0_7, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_236_0_8, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_236_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_236_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz u 'MyVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_236_0_11, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_236_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_236_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_236_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_236_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_236_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n u 'MyVertex' - 11 'MyVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_236_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_236_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_236_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_236_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_236_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_236_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_236_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_236_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_236_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_236_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first "
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_236_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n "
"u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_236_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_236_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_236_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_236_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyVertex,allocator<MyVertex> >", 3738, G__eventdict_236_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEvtId = { "MyEvtId" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPart = { "MyPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenPart = { "MyGenPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyVertex = { "MyVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MySimVertex = { "MySimVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyBeamSpot = { "MyBeamSpot" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR = { "vector<MyGenPart,allocator<MyGenPart> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator = { "vector<MyGenPart,allocator<MyGenPart> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenPart,allocator<MyGenPart> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR = { "vector<MyVertex,allocator<MyVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator = { "vector<MyVertex,allocator<MyVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyVertex,allocator<MyVertex> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TObject.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyEvtId.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TLorentzVector.tagnum = -1 ;
  G__eventdictLN_MyPart.tagnum = -1 ;
  G__eventdictLN_MyGenPart.tagnum = -1 ;
  G__eventdictLN_MyVertex.tagnum = -1 ;
  G__eventdictLN_MySimVertex.tagnum = -1 ;
  G__eventdictLN_MyBeamSpot.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyEvtId),sizeof(MyEvtId),-1,292096,(char*)NULL,G__setup_memvarMyEvtId,G__setup_memfuncMyEvtId);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPart),sizeof(MyPart),-1,324864,(char*)NULL,G__setup_memvarMyPart,G__setup_memfuncMyPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenPart),sizeof(MyGenPart),-1,324864,(char*)NULL,G__setup_memvarMyGenPart,G__setup_memfuncMyGenPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyVertex),sizeof(MyVertex),-1,292096,(char*)NULL,G__setup_memvarMyVertex,G__setup_memfuncMyVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MySimVertex),sizeof(MySimVertex),-1,292096,(char*)NULL,G__setup_memvarMySimVertex,G__setup_memfuncMySimVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyBeamSpot),sizeof(MyBeamSpot),-1,292096,(char*)NULL,G__setup_memvarMyBeamSpot,G__setup_memfuncMyBeamSpot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),sizeof(vector<MyGenPart,allocator<MyGenPart> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR,G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),sizeof(vector<MyVertex,allocator<MyVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR,G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

