//
// File generated by rootcint at Sun Dec 11 22:43:43 2011

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyEvtId_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyEvtId(void *p = 0);
   static void *newArray_MyEvtId(Long_t size, void *p);
   static void delete_MyEvtId(void *p);
   static void deleteArray_MyEvtId(void *p);
   static void destruct_MyEvtId(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyEvtId*)
   {
      ::MyEvtId *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyEvtId >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyEvtId", ::MyEvtId::Class_Version(), "././MyEvtId.h", 8,
                  typeid(::MyEvtId), DefineBehavior(ptr, ptr),
                  &::MyEvtId::Dictionary, isa_proxy, 4,
                  sizeof(::MyEvtId) );
      instance.SetNew(&new_MyEvtId);
      instance.SetNewArray(&newArray_MyEvtId);
      instance.SetDelete(&delete_MyEvtId);
      instance.SetDeleteArray(&deleteArray_MyEvtId);
      instance.SetDestructor(&destruct_MyEvtId);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyEvtId*)
   {
      return GenerateInitInstanceLocal((::MyEvtId*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyEvtId*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyL1Trig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyL1Trig(void *p = 0);
   static void *newArray_MyL1Trig(Long_t size, void *p);
   static void delete_MyL1Trig(void *p);
   static void deleteArray_MyL1Trig(void *p);
   static void destruct_MyL1Trig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyL1Trig*)
   {
      ::MyL1Trig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyL1Trig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyL1Trig", ::MyL1Trig::Class_Version(), "././MyL1Trig.h", 8,
                  typeid(::MyL1Trig), DefineBehavior(ptr, ptr),
                  &::MyL1Trig::Dictionary, isa_proxy, 4,
                  sizeof(::MyL1Trig) );
      instance.SetNew(&new_MyL1Trig);
      instance.SetNewArray(&newArray_MyL1Trig);
      instance.SetDelete(&delete_MyL1Trig);
      instance.SetDeleteArray(&deleteArray_MyL1Trig);
      instance.SetDestructor(&destruct_MyL1Trig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyL1Trig*)
   {
      return GenerateInitInstanceLocal((::MyL1Trig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyL1Trig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyHLTrig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyHLTrig(void *p = 0);
   static void *newArray_MyHLTrig(Long_t size, void *p);
   static void delete_MyHLTrig(void *p);
   static void deleteArray_MyHLTrig(void *p);
   static void destruct_MyHLTrig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyHLTrig*)
   {
      ::MyHLTrig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyHLTrig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyHLTrig", ::MyHLTrig::Class_Version(), "././MyHLTrig.h", 8,
                  typeid(::MyHLTrig), DefineBehavior(ptr, ptr),
                  &::MyHLTrig::Dictionary, isa_proxy, 4,
                  sizeof(::MyHLTrig) );
      instance.SetNew(&new_MyHLTrig);
      instance.SetNewArray(&newArray_MyHLTrig);
      instance.SetDelete(&delete_MyHLTrig);
      instance.SetDeleteArray(&deleteArray_MyHLTrig);
      instance.SetDestructor(&destruct_MyHLTrig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyHLTrig*)
   {
      return GenerateInitInstanceLocal((::MyHLTrig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyHLTrig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenKin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenKin(void *p = 0);
   static void *newArray_MyGenKin(Long_t size, void *p);
   static void delete_MyGenKin(void *p);
   static void deleteArray_MyGenKin(void *p);
   static void destruct_MyGenKin(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenKin*)
   {
      ::MyGenKin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenKin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenKin", ::MyGenKin::Class_Version(), "././MyGenKin.h", 6,
                  typeid(::MyGenKin), DefineBehavior(ptr, ptr),
                  &::MyGenKin::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenKin) );
      instance.SetNew(&new_MyGenKin);
      instance.SetNewArray(&newArray_MyGenKin);
      instance.SetDelete(&delete_MyGenKin);
      instance.SetDeleteArray(&deleteArray_MyGenKin);
      instance.SetDestructor(&destruct_MyGenKin);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenKin*)
   {
      return GenerateInitInstanceLocal((::MyGenKin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenKin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPart(void *p = 0);
   static void *newArray_MyPart(Long_t size, void *p);
   static void delete_MyPart(void *p);
   static void deleteArray_MyPart(void *p);
   static void destruct_MyPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPart*)
   {
      ::MyPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPart", ::MyPart::Class_Version(), "././MyPart.h", 6,
                  typeid(::MyPart), DefineBehavior(ptr, ptr),
                  &::MyPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyPart) );
      instance.SetNew(&new_MyPart);
      instance.SetNewArray(&newArray_MyPart);
      instance.SetDelete(&delete_MyPart);
      instance.SetDeleteArray(&deleteArray_MyPart);
      instance.SetDestructor(&destruct_MyPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPart*)
   {
      return GenerateInitInstanceLocal((::MyPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenPart(void *p = 0);
   static void *newArray_MyGenPart(Long_t size, void *p);
   static void delete_MyGenPart(void *p);
   static void deleteArray_MyGenPart(void *p);
   static void destruct_MyGenPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenPart*)
   {
      ::MyGenPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenPart", ::MyGenPart::Class_Version(), "././MyGenPart.h", 8,
                  typeid(::MyGenPart), DefineBehavior(ptr, ptr),
                  &::MyGenPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenPart) );
      instance.SetNew(&new_MyGenPart);
      instance.SetNewArray(&newArray_MyGenPart);
      instance.SetDelete(&delete_MyGenPart);
      instance.SetDeleteArray(&deleteArray_MyGenPart);
      instance.SetDestructor(&destruct_MyGenPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenPart*)
   {
      return GenerateInitInstanceLocal((::MyGenPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenJet(void *p = 0);
   static void *newArray_MyGenJet(Long_t size, void *p);
   static void delete_MyGenJet(void *p);
   static void deleteArray_MyGenJet(void *p);
   static void destruct_MyGenJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenJet*)
   {
      ::MyGenJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenJet", ::MyGenJet::Class_Version(), "././MyGenJet.h", 9,
                  typeid(::MyGenJet), DefineBehavior(ptr, ptr),
                  &::MyGenJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenJet) );
      instance.SetNew(&new_MyGenJet);
      instance.SetNewArray(&newArray_MyGenJet);
      instance.SetDelete(&delete_MyGenJet);
      instance.SetDeleteArray(&deleteArray_MyGenJet);
      instance.SetDestructor(&destruct_MyGenJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenJet*)
   {
      return GenerateInitInstanceLocal((::MyGenJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyVertex(void *p = 0);
   static void *newArray_MyVertex(Long_t size, void *p);
   static void delete_MyVertex(void *p);
   static void deleteArray_MyVertex(void *p);
   static void destruct_MyVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyVertex*)
   {
      ::MyVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyVertex", ::MyVertex::Class_Version(), "././MyVertex.h", 6,
                  typeid(::MyVertex), DefineBehavior(ptr, ptr),
                  &::MyVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MyVertex) );
      instance.SetNew(&new_MyVertex);
      instance.SetNewArray(&newArray_MyVertex);
      instance.SetDelete(&delete_MyVertex);
      instance.SetDeleteArray(&deleteArray_MyVertex);
      instance.SetDestructor(&destruct_MyVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyVertex*)
   {
      return GenerateInitInstanceLocal((::MyVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MySimVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MySimVertex(void *p = 0);
   static void *newArray_MySimVertex(Long_t size, void *p);
   static void delete_MySimVertex(void *p);
   static void deleteArray_MySimVertex(void *p);
   static void destruct_MySimVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MySimVertex*)
   {
      ::MySimVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MySimVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MySimVertex", ::MySimVertex::Class_Version(), "././MySimVertex.h", 6,
                  typeid(::MySimVertex), DefineBehavior(ptr, ptr),
                  &::MySimVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MySimVertex) );
      instance.SetNew(&new_MySimVertex);
      instance.SetNewArray(&newArray_MySimVertex);
      instance.SetDelete(&delete_MySimVertex);
      instance.SetDeleteArray(&deleteArray_MySimVertex);
      instance.SetDestructor(&destruct_MySimVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MySimVertex*)
   {
      return GenerateInitInstanceLocal((::MySimVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MySimVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyBeamSpot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyBeamSpot(void *p = 0);
   static void *newArray_MyBeamSpot(Long_t size, void *p);
   static void delete_MyBeamSpot(void *p);
   static void deleteArray_MyBeamSpot(void *p);
   static void destruct_MyBeamSpot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyBeamSpot*)
   {
      ::MyBeamSpot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyBeamSpot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyBeamSpot", ::MyBeamSpot::Class_Version(), "././MyBeamSpot.h", 6,
                  typeid(::MyBeamSpot), DefineBehavior(ptr, ptr),
                  &::MyBeamSpot::Dictionary, isa_proxy, 4,
                  sizeof(::MyBeamSpot) );
      instance.SetNew(&new_MyBeamSpot);
      instance.SetNewArray(&newArray_MyBeamSpot);
      instance.SetDelete(&delete_MyBeamSpot);
      instance.SetDeleteArray(&deleteArray_MyBeamSpot);
      instance.SetDestructor(&destruct_MyBeamSpot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyBeamSpot*)
   {
      return GenerateInitInstanceLocal((::MyBeamSpot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorDigi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorDigi(void *p = 0);
   static void *newArray_MyCastorDigi(Long_t size, void *p);
   static void delete_MyCastorDigi(void *p);
   static void deleteArray_MyCastorDigi(void *p);
   static void destruct_MyCastorDigi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorDigi*)
   {
      ::MyCastorDigi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorDigi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorDigi", ::MyCastorDigi::Class_Version(), "././MyCastorDigi.h", 8,
                  typeid(::MyCastorDigi), DefineBehavior(ptr, ptr),
                  &::MyCastorDigi::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorDigi) );
      instance.SetNew(&new_MyCastorDigi);
      instance.SetNewArray(&newArray_MyCastorDigi);
      instance.SetDelete(&delete_MyCastorDigi);
      instance.SetDeleteArray(&deleteArray_MyCastorDigi);
      instance.SetDestructor(&destruct_MyCastorDigi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorDigi*)
   {
      return GenerateInitInstanceLocal((::MyCastorDigi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorRecHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorRecHit(void *p = 0);
   static void *newArray_MyCastorRecHit(Long_t size, void *p);
   static void delete_MyCastorRecHit(void *p);
   static void deleteArray_MyCastorRecHit(void *p);
   static void destruct_MyCastorRecHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorRecHit*)
   {
      ::MyCastorRecHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorRecHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorRecHit", ::MyCastorRecHit::Class_Version(), "././MyCastorRecHit.h", 9,
                  typeid(::MyCastorRecHit), DefineBehavior(ptr, ptr),
                  &::MyCastorRecHit::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorRecHit) );
      instance.SetNew(&new_MyCastorRecHit);
      instance.SetNewArray(&newArray_MyCastorRecHit);
      instance.SetDelete(&delete_MyCastorRecHit);
      instance.SetDeleteArray(&deleteArray_MyCastorRecHit);
      instance.SetDestructor(&destruct_MyCastorRecHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorRecHit*)
   {
      return GenerateInitInstanceLocal((::MyCastorRecHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorTower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorTower(void *p = 0);
   static void *newArray_MyCastorTower(Long_t size, void *p);
   static void delete_MyCastorTower(void *p);
   static void deleteArray_MyCastorTower(void *p);
   static void destruct_MyCastorTower(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorTower*)
   {
      ::MyCastorTower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorTower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorTower", ::MyCastorTower::Class_Version(), "././MyCastorTower.h", 8,
                  typeid(::MyCastorTower), DefineBehavior(ptr, ptr),
                  &::MyCastorTower::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorTower) );
      instance.SetNew(&new_MyCastorTower);
      instance.SetNewArray(&newArray_MyCastorTower);
      instance.SetDelete(&delete_MyCastorTower);
      instance.SetDeleteArray(&deleteArray_MyCastorTower);
      instance.SetDestructor(&destruct_MyCastorTower);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorTower*)
   {
      return GenerateInitInstanceLocal((::MyCastorTower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorTower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorJet(void *p = 0);
   static void *newArray_MyCastorJet(Long_t size, void *p);
   static void delete_MyCastorJet(void *p);
   static void deleteArray_MyCastorJet(void *p);
   static void destruct_MyCastorJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorJet*)
   {
      ::MyCastorJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorJet", ::MyCastorJet::Class_Version(), "././MyCastorJet.h", 8,
                  typeid(::MyCastorJet), DefineBehavior(ptr, ptr),
                  &::MyCastorJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorJet) );
      instance.SetNew(&new_MyCastorJet);
      instance.SetNewArray(&newArray_MyCastorJet);
      instance.SetDelete(&delete_MyCastorJet);
      instance.SetDeleteArray(&deleteArray_MyCastorJet);
      instance.SetDestructor(&destruct_MyCastorJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorJet*)
   {
      return GenerateInitInstanceLocal((::MyCastorJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyJet(void *p = 0);
   static void *newArray_MyJet(Long_t size, void *p);
   static void delete_MyJet(void *p);
   static void deleteArray_MyJet(void *p);
   static void destruct_MyJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyJet*)
   {
      ::MyJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyJet", ::MyJet::Class_Version(), "././MyJet.h", 8,
                  typeid(::MyJet), DefineBehavior(ptr, ptr),
                  &::MyJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyJet) );
      instance.SetNew(&new_MyJet);
      instance.SetNewArray(&newArray_MyJet);
      instance.SetDelete(&delete_MyJet);
      instance.SetDeleteArray(&deleteArray_MyJet);
      instance.SetDestructor(&destruct_MyJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyJet*)
   {
      return GenerateInitInstanceLocal((::MyJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTrackJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyTrackJet(void *p = 0);
   static void *newArray_MyTrackJet(Long_t size, void *p);
   static void delete_MyTrackJet(void *p);
   static void deleteArray_MyTrackJet(void *p);
   static void destruct_MyTrackJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTrackJet*)
   {
      ::MyTrackJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTrackJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTrackJet", ::MyTrackJet::Class_Version(), "././MyTrackJet.h", 6,
                  typeid(::MyTrackJet), DefineBehavior(ptr, ptr),
                  &::MyTrackJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyTrackJet) );
      instance.SetNew(&new_MyTrackJet);
      instance.SetNewArray(&newArray_MyTrackJet);
      instance.SetDelete(&delete_MyTrackJet);
      instance.SetDeleteArray(&deleteArray_MyTrackJet);
      instance.SetDestructor(&destruct_MyTrackJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTrackJet*)
   {
      return GenerateInitInstanceLocal((::MyTrackJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTrackJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyDiJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyDiJet(void *p = 0);
   static void *newArray_MyDiJet(Long_t size, void *p);
   static void delete_MyDiJet(void *p);
   static void deleteArray_MyDiJet(void *p);
   static void destruct_MyDiJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyDiJet*)
   {
      ::MyDiJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyDiJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyDiJet", ::MyDiJet::Class_Version(), "././MyDiJet.h", 8,
                  typeid(::MyDiJet), DefineBehavior(ptr, ptr),
                  &::MyDiJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyDiJet) );
      instance.SetNew(&new_MyDiJet);
      instance.SetNewArray(&newArray_MyDiJet);
      instance.SetDelete(&delete_MyDiJet);
      instance.SetDeleteArray(&deleteArray_MyDiJet);
      instance.SetDestructor(&destruct_MyDiJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyDiJet*)
   {
      return GenerateInitInstanceLocal((::MyDiJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyDiJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCaloTower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCaloTower(void *p = 0);
   static void *newArray_MyCaloTower(Long_t size, void *p);
   static void delete_MyCaloTower(void *p);
   static void deleteArray_MyCaloTower(void *p);
   static void destruct_MyCaloTower(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCaloTower*)
   {
      ::MyCaloTower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCaloTower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCaloTower", ::MyCaloTower::Class_Version(), "././MyCaloTower.h", 9,
                  typeid(::MyCaloTower), DefineBehavior(ptr, ptr),
                  &::MyCaloTower::Dictionary, isa_proxy, 4,
                  sizeof(::MyCaloTower) );
      instance.SetNew(&new_MyCaloTower);
      instance.SetNewArray(&newArray_MyCaloTower);
      instance.SetDelete(&delete_MyCaloTower);
      instance.SetDeleteArray(&deleteArray_MyCaloTower);
      instance.SetDestructor(&destruct_MyCaloTower);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCaloTower*)
   {
      return GenerateInitInstanceLocal((::MyCaloTower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCaloTower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MyEvtId::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyEvtId::Class_Name()
{
   return "MyEvtId";
}

//______________________________________________________________________________
const char *MyEvtId::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyEvtId::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyEvtId::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyEvtId::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyL1Trig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyL1Trig::Class_Name()
{
   return "MyL1Trig";
}

//______________________________________________________________________________
const char *MyL1Trig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyL1Trig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyL1Trig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyL1Trig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyHLTrig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyHLTrig::Class_Name()
{
   return "MyHLTrig";
}

//______________________________________________________________________________
const char *MyHLTrig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyHLTrig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyHLTrig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyHLTrig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenKin::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenKin::Class_Name()
{
   return "MyGenKin";
}

//______________________________________________________________________________
const char *MyGenKin::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenKin::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenKin::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenKin::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPart::Class_Name()
{
   return "MyPart";
}

//______________________________________________________________________________
const char *MyPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenPart::Class_Name()
{
   return "MyGenPart";
}

//______________________________________________________________________________
const char *MyGenPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenJet::Class_Name()
{
   return "MyGenJet";
}

//______________________________________________________________________________
const char *MyGenJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyVertex::Class_Name()
{
   return "MyVertex";
}

//______________________________________________________________________________
const char *MyVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MySimVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MySimVertex::Class_Name()
{
   return "MySimVertex";
}

//______________________________________________________________________________
const char *MySimVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MySimVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MySimVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MySimVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyBeamSpot::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyBeamSpot::Class_Name()
{
   return "MyBeamSpot";
}

//______________________________________________________________________________
const char *MyBeamSpot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyBeamSpot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyBeamSpot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyBeamSpot::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorDigi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorDigi::Class_Name()
{
   return "MyCastorDigi";
}

//______________________________________________________________________________
const char *MyCastorDigi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorDigi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorDigi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorDigi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorRecHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorRecHit::Class_Name()
{
   return "MyCastorRecHit";
}

//______________________________________________________________________________
const char *MyCastorRecHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorRecHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorRecHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorRecHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorTower::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorTower::Class_Name()
{
   return "MyCastorTower";
}

//______________________________________________________________________________
const char *MyCastorTower::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorTower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorTower::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorTower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorTower::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorTower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorTower::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorTower*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorJet::Class_Name()
{
   return "MyCastorJet";
}

//______________________________________________________________________________
const char *MyCastorJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyJet::Class_Name()
{
   return "MyJet";
}

//______________________________________________________________________________
const char *MyJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTrackJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTrackJet::Class_Name()
{
   return "MyTrackJet";
}

//______________________________________________________________________________
const char *MyTrackJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTrackJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTrackJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTrackJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyDiJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyDiJet::Class_Name()
{
   return "MyDiJet";
}

//______________________________________________________________________________
const char *MyDiJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyDiJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyDiJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyDiJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCaloTower::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCaloTower::Class_Name()
{
   return "MyCaloTower";
}

//______________________________________________________________________________
const char *MyCaloTower::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCaloTower::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCaloTower::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCaloTower::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MyPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPart.
      TClass *R__cl = ::MyPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPart(void *p) {
      return  p ? new(p) ::MyPart : new ::MyPart;
   }
   static void *newArray_MyPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyPart[nElements] : new ::MyPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPart(void *p) {
      delete ((::MyPart*)p);
   }
   static void deleteArray_MyPart(void *p) {
      delete [] ((::MyPart*)p);
   }
   static void destruct_MyPart(void *p) {
      typedef ::MyPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPart

//______________________________________________________________________________
void MyEvtId::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyEvtId.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyEvtId::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyEvtId::Class(),this);
   }
}

//______________________________________________________________________________
void MyEvtId::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyEvtId.
      TClass *R__cl = ::MyEvtId::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Run", &Run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Evt", &Evt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LumiBlock", &LumiBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsData", &IsData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ExpType", &ExpType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bunch", &Bunch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Orbit", &Orbit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumi", &IstLumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumiErr", &IstLumiErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IstLumiPerBX", &IstLumiPerBX);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyEvtId(void *p) {
      return  p ? new(p) ::MyEvtId : new ::MyEvtId;
   }
   static void *newArray_MyEvtId(Long_t nElements, void *p) {
      return p ? new(p) ::MyEvtId[nElements] : new ::MyEvtId[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyEvtId(void *p) {
      delete ((::MyEvtId*)p);
   }
   static void deleteArray_MyEvtId(void *p) {
      delete [] ((::MyEvtId*)p);
   }
   static void destruct_MyEvtId(void *p) {
      typedef ::MyEvtId current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyEvtId

//______________________________________________________________________________
void MyL1Trig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyL1Trig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyL1Trig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyL1Trig::Class(),this);
   }
}

//______________________________________________________________________________
void MyL1Trig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyL1Trig.
      TClass *R__cl = ::MyL1Trig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysMap", (void*)&fPhysMap);
      R__insp.InspectMember("MyL1Trig::TrigMap", (void*)&fPhysMap, "fPhysMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysMask[128]", fPhysMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysDecisionBefore[128]", fPhysDecisionBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysDecisionAfter[128]", fPhysDecisionAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysPrescale[128]", fPhysPrescale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysAlias[128]", fPhysAlias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechMap", (void*)&fTechMap);
      R__insp.InspectMember("MyL1Trig::TrigMap", (void*)&fTechMap, "fTechMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechMask[64]", fTechMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechDecisionBefore[64]", fTechDecisionBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechDecisionAfter[64]", fTechDecisionAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechPrescale[64]", fTechPrescale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechAlias[64]", fTechAlias);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyL1Trig(void *p) {
      return  p ? new(p) ::MyL1Trig : new ::MyL1Trig;
   }
   static void *newArray_MyL1Trig(Long_t nElements, void *p) {
      return p ? new(p) ::MyL1Trig[nElements] : new ::MyL1Trig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyL1Trig(void *p) {
      delete ((::MyL1Trig*)p);
   }
   static void deleteArray_MyL1Trig(void *p) {
      delete [] ((::MyL1Trig*)p);
   }
   static void destruct_MyL1Trig(void *p) {
      typedef ::MyL1Trig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyL1Trig

//______________________________________________________________________________
void MyHLTrig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyHLTrig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyHLTrig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyHLTrig::Class(),this);
   }
}

//______________________________________________________________________________
void MyHLTrig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyHLTrig.
      TClass *R__cl = ::MyHLTrig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLTmap", (void*)&HLTmap);
      R__insp.InspectMember("map<string,bool>", (void*)&HLTmap, "HLTmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLTprescale", (void*)&HLTprescale);
      R__insp.InspectMember("map<string,double>", (void*)&HLTprescale, "HLTprescale.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyHLTrig(void *p) {
      return  p ? new(p) ::MyHLTrig : new ::MyHLTrig;
   }
   static void *newArray_MyHLTrig(Long_t nElements, void *p) {
      return p ? new(p) ::MyHLTrig[nElements] : new ::MyHLTrig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyHLTrig(void *p) {
      delete ((::MyHLTrig*)p);
   }
   static void deleteArray_MyHLTrig(void *p) {
      delete [] ((::MyHLTrig*)p);
   }
   static void destruct_MyHLTrig(void *p) {
      typedef ::MyHLTrig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyHLTrig

//______________________________________________________________________________
void MyGenKin::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenKin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenKin::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenKin::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenKin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenKin.
      TClass *R__cl = ::MyGenKin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ProcessId", &ProcessId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PtHat", &PtHat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q", &Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Idparton1", &Idparton1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Idparton2", &Idparton2);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenKin(void *p) {
      return  p ? new(p) ::MyGenKin : new ::MyGenKin;
   }
   static void *newArray_MyGenKin(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenKin[nElements] : new ::MyGenKin[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenKin(void *p) {
      delete ((::MyGenKin*)p);
   }
   static void deleteArray_MyGenKin(void *p) {
      delete [] ((::MyGenKin*)p);
   }
   static void destruct_MyGenKin(void *p) {
      typedef ::MyGenKin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenKin

//______________________________________________________________________________
void MyGenPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenPart.
      TClass *R__cl = ::MyGenPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&name);
      R__insp.InspectMember("string", (void*)&name, "name.", false);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenPart(void *p) {
      return  p ? new(p) ::MyGenPart : new ::MyGenPart;
   }
   static void *newArray_MyGenPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenPart[nElements] : new ::MyGenPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenPart(void *p) {
      delete ((::MyGenPart*)p);
   }
   static void deleteArray_MyGenPart(void *p) {
      delete [] ((::MyGenPart*)p);
   }
   static void destruct_MyGenPart(void *p) {
      typedef ::MyGenPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenPart

//______________________________________________________________________________
void MyGenJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenJet.
      TClass *R__cl = ::MyGenJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npart", &npart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetPart", (void*)&JetPart);
      R__insp.InspectMember("vector<MyGenPart>", (void*)&JetPart, "JetPart.", false);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenJet(void *p) {
      return  p ? new(p) ::MyGenJet : new ::MyGenJet;
   }
   static void *newArray_MyGenJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenJet[nElements] : new ::MyGenJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenJet(void *p) {
      delete ((::MyGenJet*)p);
   }
   static void deleteArray_MyGenJet(void *p) {
      delete [] ((::MyGenJet*)p);
   }
   static void destruct_MyGenJet(void *p) {
      typedef ::MyGenJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenJet

//______________________________________________________________________________
void MyBeamSpot::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyBeamSpot.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyBeamSpot::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyBeamSpot::Class(),this);
   }
}

//______________________________________________________________________________
void MyBeamSpot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyBeamSpot.
      TClass *R__cl = ::MyBeamSpot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaZ", &sigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esigmaZ", &esigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edxdz", &edxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edydz", &edydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthX", &BeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthY", &BeamWidthY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthX", &eBeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthY", &eBeamWidthY);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyBeamSpot(void *p) {
      return  p ? new(p) ::MyBeamSpot : new ::MyBeamSpot;
   }
   static void *newArray_MyBeamSpot(Long_t nElements, void *p) {
      return p ? new(p) ::MyBeamSpot[nElements] : new ::MyBeamSpot[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyBeamSpot(void *p) {
      delete ((::MyBeamSpot*)p);
   }
   static void deleteArray_MyBeamSpot(void *p) {
      delete [] ((::MyBeamSpot*)p);
   }
   static void destruct_MyBeamSpot(void *p) {
      typedef ::MyBeamSpot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyBeamSpot

//______________________________________________________________________________
void MyVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MyVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyVertex.
      TClass *R__cl = ::MyVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rho", &rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "erho", &erho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validity", &validity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fake", &fake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2n", &chi2n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGoodVertex", &isGoodVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntracks", &ntracks);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyVertex(void *p) {
      return  p ? new(p) ::MyVertex : new ::MyVertex;
   }
   static void *newArray_MyVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MyVertex[nElements] : new ::MyVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyVertex(void *p) {
      delete ((::MyVertex*)p);
   }
   static void deleteArray_MyVertex(void *p) {
      delete [] ((::MyVertex*)p);
   }
   static void destruct_MyVertex(void *p) {
      typedef ::MyVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyVertex

//______________________________________________________________________________
void MySimVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MySimVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MySimVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MySimVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MySimVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MySimVertex.
      TClass *R__cl = ::MySimVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MySimVertex(void *p) {
      return  p ? new(p) ::MySimVertex : new ::MySimVertex;
   }
   static void *newArray_MySimVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MySimVertex[nElements] : new ::MySimVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MySimVertex(void *p) {
      delete ((::MySimVertex*)p);
   }
   static void deleteArray_MySimVertex(void *p) {
      delete [] ((::MySimVertex*)p);
   }
   static void destruct_MySimVertex(void *p) {
      typedef ::MySimVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MySimVertex

//______________________________________________________________________________
void MyCastorDigi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorDigi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorDigi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorDigi::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorDigi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorDigi.
      TClass *R__cl = ::MyCastorDigi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc", (void*)&adc);
      R__insp.InspectMember("vector<Double_t>", (void*)&adc, "adc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", (void*)&fC);
      R__insp.InspectMember("vector<Double_t>", (void*)&fC, "fC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cha", &cha);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorDigi(void *p) {
      return  p ? new(p) ::MyCastorDigi : new ::MyCastorDigi;
   }
   static void *newArray_MyCastorDigi(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorDigi[nElements] : new ::MyCastorDigi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorDigi(void *p) {
      delete ((::MyCastorDigi*)p);
   }
   static void deleteArray_MyCastorDigi(void *p) {
      delete [] ((::MyCastorDigi*)p);
   }
   static void destruct_MyCastorDigi(void *p) {
      typedef ::MyCastorDigi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorDigi

//______________________________________________________________________________
void MyCastorRecHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorRecHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorRecHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorRecHit::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorRecHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorRecHit.
      TClass *R__cl = ::MyCastorRecHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", &fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cha", &cha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "smearing", &smearing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy_smeared", &energy_smeared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC_smeared", &fC_smeared);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorRecHit(void *p) {
      return  p ? new(p) ::MyCastorRecHit : new ::MyCastorRecHit;
   }
   static void *newArray_MyCastorRecHit(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorRecHit[nElements] : new ::MyCastorRecHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorRecHit(void *p) {
      delete ((::MyCastorRecHit*)p);
   }
   static void deleteArray_MyCastorRecHit(void *p) {
      delete [] ((::MyCastorRecHit*)p);
   }
   static void destruct_MyCastorRecHit(void *p) {
      typedef ::MyCastorRecHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorRecHit

//______________________________________________________________________________
void MyCastorTower::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorTower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorTower::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorTower::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorTower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorTower.
      TClass *R__cl = ::MyCastorTower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem", &fem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem", &eem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad", &ehad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "depth", &depth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhot", &fhot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncell", &ncell);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorTower(void *p) {
      return  p ? new(p) ::MyCastorTower : new ::MyCastorTower;
   }
   static void *newArray_MyCastorTower(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorTower[nElements] : new ::MyCastorTower[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorTower(void *p) {
      delete ((::MyCastorTower*)p);
   }
   static void deleteArray_MyCastorTower(void *p) {
      delete [] ((::MyCastorTower*)p);
   }
   static void destruct_MyCastorTower(void *p) {
      typedef ::MyCastorTower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorTower

//______________________________________________________________________________
void MyCastorJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorJet.
      TClass *R__cl = ::MyCastorJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem", &fem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem", &eem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad", &ehad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width", &width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "depth", &depth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhot", &fhot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaz", &sigmaz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntower", &ntower);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorJet(void *p) {
      return  p ? new(p) ::MyCastorJet : new ::MyCastorJet;
   }
   static void *newArray_MyCastorJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorJet[nElements] : new ::MyCastorJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorJet(void *p) {
      delete ((::MyCastorJet*)p);
   }
   static void deleteArray_MyCastorJet(void *p) {
      delete [] ((::MyCastorJet*)p);
   }
   static void destruct_MyCastorJet(void *p) {
      typedef ::MyCastorJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorJet

//______________________________________________________________________________
void MyJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyJet.
      TClass *R__cl = ::MyJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_raw", &e_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_raw", &pt_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_raw", &eta_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_raw", &phi_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_raw", &px_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_raw", &py_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_raw", &pz_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec", &jec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec_unc", &jec_unc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_cal", &e_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_cal", &pt_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_cal", &eta_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_cal", &phi_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_cal", &px_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_cal", &py_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_cal", &pz_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad_ch", &fhad_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad_ne", &fhad_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem_ch", &fem_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem_ne", &fem_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ch", &multi_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ne", &multi_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ch_had", &multi_ch_had);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ne_had", &multi_ne_had);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_gamma", &multi_gamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ele", &multi_ele);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_mu", &multi_mu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem", &fem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_EB", &eem_EB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_EE", &eem_EE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_HF", &eem_HF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad", &fhad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HB", &ehad_HB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HE", &ehad_HE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HF", &ehad_HF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HO", &ehad_HO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n60", &n60);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90", &n90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emax_ecal", &emax_ecal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emax_hcal", &emax_hcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90hits", &n90hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HPD", &HPD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RBX", &RBX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_eta", &sigma_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_phi", &sigma_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nconstituent", &nconstituent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrack", &ntrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightPFJetId", &TightPFJetId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseCaloJetId", &LooseCaloJetId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightCaloJetId", &TightCaloJetId);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyJet(void *p) {
      return  p ? new(p) ::MyJet : new ::MyJet;
   }
   static void *newArray_MyJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyJet[nElements] : new ::MyJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyJet(void *p) {
      delete ((::MyJet*)p);
   }
   static void deleteArray_MyJet(void *p) {
      delete [] ((::MyJet*)p);
   }
   static void destruct_MyJet(void *p) {
      typedef ::MyJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyJet

//______________________________________________________________________________
void MyTrackJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTrackJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTrackJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTrackJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyTrackJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTrackJet.
      TClass *R__cl = ::MyTrackJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_raw", &e_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_raw", &pt_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_raw", &eta_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_raw", &phi_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_raw", &px_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_raw", &py_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_raw", &pz_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec", &jec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec_unc", &jec_unc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_cal", &e_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_cal", &pt_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_cal", &eta_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_cal", &phi_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_cal", &px_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_cal", &py_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_cal", &pz_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrack", &ntrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv", &pv);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTrackJet(void *p) {
      return  p ? new(p) ::MyTrackJet : new ::MyTrackJet;
   }
   static void *newArray_MyTrackJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyTrackJet[nElements] : new ::MyTrackJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTrackJet(void *p) {
      delete ((::MyTrackJet*)p);
   }
   static void deleteArray_MyTrackJet(void *p) {
      delete [] ((::MyTrackJet*)p);
   }
   static void destruct_MyTrackJet(void *p) {
      typedef ::MyTrackJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTrackJet

//______________________________________________________________________________
void MyDiJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyDiJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyDiJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyDiJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyDiJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyDiJet.
      TClass *R__cl = ::MyDiJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isDiJet", &isDiJet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posJet1", &posJet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posJet2", &posJet2);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyDiJet(void *p) {
      return  p ? new(p) ::MyDiJet : new ::MyDiJet;
   }
   static void *newArray_MyDiJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyDiJet[nElements] : new ::MyDiJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyDiJet(void *p) {
      delete ((::MyDiJet*)p);
   }
   static void deleteArray_MyDiJet(void *p) {
      delete [] ((::MyDiJet*)p);
   }
   static void destruct_MyDiJet(void *p) {
      typedef ::MyDiJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyDiJet

//______________________________________________________________________________
void MyCaloTower::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCaloTower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCaloTower::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCaloTower::Class(),this);
   }
}

//______________________________________________________________________________
void MyCaloTower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCaloTower.
      TClass *R__cl = ::MyCaloTower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergy", &emEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergy", &hadEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasEB", &hasEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasEE", &hasEE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHB", &hasHB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHE", &hasHE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHF", &hasHF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zside", &zside);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCaloTower(void *p) {
      return  p ? new(p) ::MyCaloTower : new ::MyCaloTower;
   }
   static void *newArray_MyCaloTower(Long_t nElements, void *p) {
      return p ? new(p) ::MyCaloTower[nElements] : new ::MyCaloTower[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCaloTower(void *p) {
      delete ((::MyCaloTower*)p);
   }
   static void deleteArray_MyCaloTower(void *p) {
      delete [] ((::MyCaloTower*)p);
   }
   static void destruct_MyCaloTower(void *p) {
      typedef ::MyCaloTower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCaloTower

namespace ROOT {
   void maplEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOboolgR_Dictionary();
   static void *new_maplEstringcOboolgR(void *p = 0);
   static void *newArray_maplEstringcOboolgR(Long_t size, void *p);
   static void delete_maplEstringcOboolgR(void *p);
   static void deleteArray_maplEstringcOboolgR(void *p);
   static void destruct_maplEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,bool>*)
   {
      map<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,bool>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,bool>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOboolgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,bool>) );
      instance.SetNew(&new_maplEstringcOboolgR);
      instance.SetNewArray(&newArray_maplEstringcOboolgR);
      instance.SetDelete(&delete_maplEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOboolgR);
      instance.SetDestructor(&destruct_maplEstringcOboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool> : new map<string,bool>;
   }
   static void *newArray_maplEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool>[nElements] : new map<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOboolgR(void *p) {
      delete ((map<string,bool>*)p);
   }
   static void deleteArray_maplEstringcOboolgR(void *p) {
      delete [] ((map<string,bool>*)p);
   }
   static void destruct_maplEstringcOboolgR(void *p) {
      typedef map<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,bool>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOunsignedsPintgR_Dictionary();
   static void *new_maplEstringcOunsignedsPintgR(void *p = 0);
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t size, void *p);
   static void delete_maplEstringcOunsignedsPintgR(void *p);
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p);
   static void destruct_maplEstringcOunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,unsigned int>*)
   {
      map<string,unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,unsigned int>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,unsigned int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,unsigned int>) );
      instance.SetNew(&new_maplEstringcOunsignedsPintgR);
      instance.SetNewArray(&newArray_maplEstringcOunsignedsPintgR);
      instance.SetDelete(&delete_maplEstringcOunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOunsignedsPintgR);
      instance.SetDestructor(&destruct_maplEstringcOunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int> : new map<string,unsigned int>;
   }
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int>[nElements] : new map<string,unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOunsignedsPintgR(void *p) {
      delete ((map<string,unsigned int>*)p);
   }
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p) {
      delete [] ((map<string,unsigned int>*)p);
   }
   static void destruct_maplEstringcOunsignedsPintgR(void *p) {
      typedef map<string,unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,unsigned int>

namespace ROOT {
   void vectorlEMyCaloTowergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCaloTowergR_Dictionary();
   static void *new_vectorlEMyCaloTowergR(void *p = 0);
   static void *newArray_vectorlEMyCaloTowergR(Long_t size, void *p);
   static void delete_vectorlEMyCaloTowergR(void *p);
   static void deleteArray_vectorlEMyCaloTowergR(void *p);
   static void destruct_vectorlEMyCaloTowergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCaloTower>*)
   {
      vector<MyCaloTower> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCaloTower>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCaloTower>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCaloTower>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCaloTowergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCaloTower>) );
      instance.SetNew(&new_vectorlEMyCaloTowergR);
      instance.SetNewArray(&newArray_vectorlEMyCaloTowergR);
      instance.SetDelete(&delete_vectorlEMyCaloTowergR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCaloTowergR);
      instance.SetDestructor(&destruct_vectorlEMyCaloTowergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCaloTower> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCaloTower>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCaloTowergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCaloTower>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCaloTowergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloTower> : new vector<MyCaloTower>;
   }
   static void *newArray_vectorlEMyCaloTowergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloTower>[nElements] : new vector<MyCaloTower>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCaloTowergR(void *p) {
      delete ((vector<MyCaloTower>*)p);
   }
   static void deleteArray_vectorlEMyCaloTowergR(void *p) {
      delete [] ((vector<MyCaloTower>*)p);
   }
   static void destruct_vectorlEMyCaloTowergR(void *p) {
      typedef vector<MyCaloTower> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCaloTower>

namespace ROOT {
   void vectorlEMyCastorDigigR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorDigigR_Dictionary();
   static void *new_vectorlEMyCastorDigigR(void *p = 0);
   static void *newArray_vectorlEMyCastorDigigR(Long_t size, void *p);
   static void delete_vectorlEMyCastorDigigR(void *p);
   static void deleteArray_vectorlEMyCastorDigigR(void *p);
   static void destruct_vectorlEMyCastorDigigR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorDigi>*)
   {
      vector<MyCastorDigi> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorDigi>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorDigi>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorDigi>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorDigigR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorDigi>) );
      instance.SetNew(&new_vectorlEMyCastorDigigR);
      instance.SetNewArray(&newArray_vectorlEMyCastorDigigR);
      instance.SetDelete(&delete_vectorlEMyCastorDigigR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorDigigR);
      instance.SetDestructor(&destruct_vectorlEMyCastorDigigR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorDigi> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorDigi>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorDigigR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorDigi>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorDigigR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorDigi> : new vector<MyCastorDigi>;
   }
   static void *newArray_vectorlEMyCastorDigigR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorDigi>[nElements] : new vector<MyCastorDigi>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorDigigR(void *p) {
      delete ((vector<MyCastorDigi>*)p);
   }
   static void deleteArray_vectorlEMyCastorDigigR(void *p) {
      delete [] ((vector<MyCastorDigi>*)p);
   }
   static void destruct_vectorlEMyCastorDigigR(void *p) {
      typedef vector<MyCastorDigi> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorDigi>

namespace ROOT {
   void vectorlEMyCastorJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorJetgR_Dictionary();
   static void *new_vectorlEMyCastorJetgR(void *p = 0);
   static void *newArray_vectorlEMyCastorJetgR(Long_t size, void *p);
   static void delete_vectorlEMyCastorJetgR(void *p);
   static void deleteArray_vectorlEMyCastorJetgR(void *p);
   static void destruct_vectorlEMyCastorJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorJet>*)
   {
      vector<MyCastorJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorJet>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorJet>) );
      instance.SetNew(&new_vectorlEMyCastorJetgR);
      instance.SetNewArray(&newArray_vectorlEMyCastorJetgR);
      instance.SetDelete(&delete_vectorlEMyCastorJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorJetgR);
      instance.SetDestructor(&destruct_vectorlEMyCastorJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorJet> : new vector<MyCastorJet>;
   }
   static void *newArray_vectorlEMyCastorJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorJet>[nElements] : new vector<MyCastorJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorJetgR(void *p) {
      delete ((vector<MyCastorJet>*)p);
   }
   static void deleteArray_vectorlEMyCastorJetgR(void *p) {
      delete [] ((vector<MyCastorJet>*)p);
   }
   static void destruct_vectorlEMyCastorJetgR(void *p) {
      typedef vector<MyCastorJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorJet>

namespace ROOT {
   void vectorlEMyCastorRecHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorRecHitgR_Dictionary();
   static void *new_vectorlEMyCastorRecHitgR(void *p = 0);
   static void *newArray_vectorlEMyCastorRecHitgR(Long_t size, void *p);
   static void delete_vectorlEMyCastorRecHitgR(void *p);
   static void deleteArray_vectorlEMyCastorRecHitgR(void *p);
   static void destruct_vectorlEMyCastorRecHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorRecHit>*)
   {
      vector<MyCastorRecHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorRecHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorRecHit>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorRecHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorRecHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorRecHit>) );
      instance.SetNew(&new_vectorlEMyCastorRecHitgR);
      instance.SetNewArray(&newArray_vectorlEMyCastorRecHitgR);
      instance.SetDelete(&delete_vectorlEMyCastorRecHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorRecHitgR);
      instance.SetDestructor(&destruct_vectorlEMyCastorRecHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorRecHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorRecHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorRecHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorRecHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorRecHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorRecHit> : new vector<MyCastorRecHit>;
   }
   static void *newArray_vectorlEMyCastorRecHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorRecHit>[nElements] : new vector<MyCastorRecHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorRecHitgR(void *p) {
      delete ((vector<MyCastorRecHit>*)p);
   }
   static void deleteArray_vectorlEMyCastorRecHitgR(void *p) {
      delete [] ((vector<MyCastorRecHit>*)p);
   }
   static void destruct_vectorlEMyCastorRecHitgR(void *p) {
      typedef vector<MyCastorRecHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorRecHit>

namespace ROOT {
   void vectorlEMyCastorTowergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorTowergR_Dictionary();
   static void *new_vectorlEMyCastorTowergR(void *p = 0);
   static void *newArray_vectorlEMyCastorTowergR(Long_t size, void *p);
   static void delete_vectorlEMyCastorTowergR(void *p);
   static void deleteArray_vectorlEMyCastorTowergR(void *p);
   static void destruct_vectorlEMyCastorTowergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorTower>*)
   {
      vector<MyCastorTower> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorTower>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorTower>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorTower>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorTowergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorTower>) );
      instance.SetNew(&new_vectorlEMyCastorTowergR);
      instance.SetNewArray(&newArray_vectorlEMyCastorTowergR);
      instance.SetDelete(&delete_vectorlEMyCastorTowergR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorTowergR);
      instance.SetDestructor(&destruct_vectorlEMyCastorTowergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorTower> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorTower>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorTowergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorTower>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorTowergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorTower> : new vector<MyCastorTower>;
   }
   static void *newArray_vectorlEMyCastorTowergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorTower>[nElements] : new vector<MyCastorTower>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorTowergR(void *p) {
      delete ((vector<MyCastorTower>*)p);
   }
   static void deleteArray_vectorlEMyCastorTowergR(void *p) {
      delete [] ((vector<MyCastorTower>*)p);
   }
   static void destruct_vectorlEMyCastorTowergR(void *p) {
      typedef vector<MyCastorTower> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorTower>

namespace ROOT {
   void vectorlEMyGenJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenJetgR_Dictionary();
   static void *new_vectorlEMyGenJetgR(void *p = 0);
   static void *newArray_vectorlEMyGenJetgR(Long_t size, void *p);
   static void delete_vectorlEMyGenJetgR(void *p);
   static void deleteArray_vectorlEMyGenJetgR(void *p);
   static void destruct_vectorlEMyGenJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenJet>*)
   {
      vector<MyGenJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenJet>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenJet>) );
      instance.SetNew(&new_vectorlEMyGenJetgR);
      instance.SetNewArray(&newArray_vectorlEMyGenJetgR);
      instance.SetDelete(&delete_vectorlEMyGenJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenJetgR);
      instance.SetDestructor(&destruct_vectorlEMyGenJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet> : new vector<MyGenJet>;
   }
   static void *newArray_vectorlEMyGenJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet>[nElements] : new vector<MyGenJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenJetgR(void *p) {
      delete ((vector<MyGenJet>*)p);
   }
   static void deleteArray_vectorlEMyGenJetgR(void *p) {
      delete [] ((vector<MyGenJet>*)p);
   }
   static void destruct_vectorlEMyGenJetgR(void *p) {
      typedef vector<MyGenJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenJet>

namespace ROOT {
   void vectorlEMyGenPartgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenPartgR_Dictionary();
   static void *new_vectorlEMyGenPartgR(void *p = 0);
   static void *newArray_vectorlEMyGenPartgR(Long_t size, void *p);
   static void delete_vectorlEMyGenPartgR(void *p);
   static void deleteArray_vectorlEMyGenPartgR(void *p);
   static void destruct_vectorlEMyGenPartgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenPart>*)
   {
      vector<MyGenPart> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenPart>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenPart>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenPart>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenPartgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenPart>) );
      instance.SetNew(&new_vectorlEMyGenPartgR);
      instance.SetNewArray(&newArray_vectorlEMyGenPartgR);
      instance.SetDelete(&delete_vectorlEMyGenPartgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenPartgR);
      instance.SetDestructor(&destruct_vectorlEMyGenPartgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenPart> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenPartgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenPartgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart> : new vector<MyGenPart>;
   }
   static void *newArray_vectorlEMyGenPartgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart>[nElements] : new vector<MyGenPart>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenPartgR(void *p) {
      delete ((vector<MyGenPart>*)p);
   }
   static void deleteArray_vectorlEMyGenPartgR(void *p) {
      delete [] ((vector<MyGenPart>*)p);
   }
   static void destruct_vectorlEMyGenPartgR(void *p) {
      typedef vector<MyGenPart> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenPart>

namespace ROOT {
   void vectorlEMyJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyJetgR_Dictionary();
   static void *new_vectorlEMyJetgR(void *p = 0);
   static void *newArray_vectorlEMyJetgR(Long_t size, void *p);
   static void delete_vectorlEMyJetgR(void *p);
   static void deleteArray_vectorlEMyJetgR(void *p);
   static void destruct_vectorlEMyJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyJet>*)
   {
      vector<MyJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyJet>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyJet>) );
      instance.SetNew(&new_vectorlEMyJetgR);
      instance.SetNewArray(&newArray_vectorlEMyJetgR);
      instance.SetDelete(&delete_vectorlEMyJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyJetgR);
      instance.SetDestructor(&destruct_vectorlEMyJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet> : new vector<MyJet>;
   }
   static void *newArray_vectorlEMyJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet>[nElements] : new vector<MyJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyJetgR(void *p) {
      delete ((vector<MyJet>*)p);
   }
   static void deleteArray_vectorlEMyJetgR(void *p) {
      delete [] ((vector<MyJet>*)p);
   }
   static void destruct_vectorlEMyJetgR(void *p) {
      typedef vector<MyJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyJet>

namespace ROOT {
   void vectorlEMyTrackJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyTrackJetgR_Dictionary();
   static void *new_vectorlEMyTrackJetgR(void *p = 0);
   static void *newArray_vectorlEMyTrackJetgR(Long_t size, void *p);
   static void delete_vectorlEMyTrackJetgR(void *p);
   static void deleteArray_vectorlEMyTrackJetgR(void *p);
   static void destruct_vectorlEMyTrackJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTrackJet>*)
   {
      vector<MyTrackJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTrackJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTrackJet>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTrackJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTrackJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyTrackJet>) );
      instance.SetNew(&new_vectorlEMyTrackJetgR);
      instance.SetNewArray(&newArray_vectorlEMyTrackJetgR);
      instance.SetDelete(&delete_vectorlEMyTrackJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTrackJetgR);
      instance.SetDestructor(&destruct_vectorlEMyTrackJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTrackJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTrackJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTrackJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTrackJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTrackJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrackJet> : new vector<MyTrackJet>;
   }
   static void *newArray_vectorlEMyTrackJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrackJet>[nElements] : new vector<MyTrackJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTrackJetgR(void *p) {
      delete ((vector<MyTrackJet>*)p);
   }
   static void deleteArray_vectorlEMyTrackJetgR(void *p) {
      delete [] ((vector<MyTrackJet>*)p);
   }
   static void destruct_vectorlEMyTrackJetgR(void *p) {
      typedef vector<MyTrackJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTrackJet>

namespace ROOT {
   void vectorlEMyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyVertexgR_Dictionary();
   static void *new_vectorlEMyVertexgR(void *p = 0);
   static void *newArray_vectorlEMyVertexgR(Long_t size, void *p);
   static void delete_vectorlEMyVertexgR(void *p);
   static void deleteArray_vectorlEMyVertexgR(void *p);
   static void destruct_vectorlEMyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyVertex>*)
   {
      vector<MyVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyVertex>", -2, "/jefmount_mnt/jefmount/cmss/slc5_amd64_gcc434/lcg/root/5.27.06b-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyVertex>) );
      instance.SetNew(&new_vectorlEMyVertexgR);
      instance.SetNewArray(&newArray_vectorlEMyVertexgR);
      instance.SetDelete(&delete_vectorlEMyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyVertexgR);
      instance.SetDestructor(&destruct_vectorlEMyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex> : new vector<MyVertex>;
   }
   static void *newArray_vectorlEMyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex>[nElements] : new vector<MyVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyVertexgR(void *p) {
      delete ((vector<MyVertex>*)p);
   }
   static void deleteArray_vectorlEMyVertexgR(void *p) {
      delete [] ((vector<MyVertex>*)p);
   }
   static void destruct_vectorlEMyVertexgR(void *p) {
      typedef vector<MyVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyVertex>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyEvtId */
static int G__eventdict_161_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId[n];
     } else {
       p = new((void*) gvp) MyEvtId[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId;
     } else {
       p = new((void*) gvp) MyEvtId;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyEvtId::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyEvtId::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyEvtId::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_161_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_161_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyEvtId* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyEvtId(*(MyEvtId*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyEvtId G__TMyEvtId;
static int G__eventdict_161_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyEvtId*) (soff+(sizeof(MyEvtId)*i)))->~G__TMyEvtId();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyEvtId*) (soff))->~G__TMyEvtId();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_161_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* dest = (MyEvtId*) G__getstructoffset();
   *dest = *(MyEvtId*) libp->para[0].ref;
   const MyEvtId& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyL1Trig */
static int G__eventdict_397_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig[n];
     } else {
       p = new((void*) gvp) MyL1Trig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig;
     } else {
       p = new((void*) gvp) MyL1Trig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->SetPhys(
*((string*) G__int(libp->para[0])), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, *((string*) G__int(libp->para[6])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysName((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysMask((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionBefore((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionAfter((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysPrescale((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysAlias((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysBit(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysMaskByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionBeforeByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionAfterByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysPrescaleByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysAliasByName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->SetTech(
*((string*) G__int(libp->para[0])), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, *((string*) G__int(libp->para[6])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechName((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechMask((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionBefore((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionAfter((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechPrescale((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechAlias((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechBit(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechMaskByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionBeforeByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionAfterByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechPrescaleByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechAliasByName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyL1Trig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyL1Trig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyL1Trig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_397_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_397_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyL1Trig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyL1Trig(*(MyL1Trig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyL1Trig G__TMyL1Trig;
static int G__eventdict_397_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyL1Trig*) (soff+(sizeof(MyL1Trig)*i)))->~G__TMyL1Trig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyL1Trig*) (soff))->~G__TMyL1Trig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_397_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* dest = (MyL1Trig*) G__getstructoffset();
   *dest = *(MyL1Trig*) libp->para[0].ref;
   const MyL1Trig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyHLTrig */
static int G__eventdict_405_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyHLTrig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyHLTrig[n];
     } else {
       p = new((void*) gvp) MyHLTrig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyHLTrig;
     } else {
       p = new((void*) gvp) MyHLTrig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyHLTrig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyHLTrig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyHLTrig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyHLTrig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyHLTrig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_405_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyHLTrig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_405_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyHLTrig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyHLTrig(*(MyHLTrig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyHLTrig G__TMyHLTrig;
static int G__eventdict_405_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyHLTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyHLTrig*) (soff+(sizeof(MyHLTrig)*i)))->~G__TMyHLTrig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyHLTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyHLTrig*) (soff))->~G__TMyHLTrig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_405_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyHLTrig* dest = (MyHLTrig*) G__getstructoffset();
   *dest = *(MyHLTrig*) libp->para[0].ref;
   const MyHLTrig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenKin */
static int G__eventdict_413_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin[n];
     } else {
       p = new((void*) gvp) MyGenKin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin;
     } else {
       p = new((void*) gvp) MyGenKin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenKin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenKin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenKin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_413_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_413_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenKin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenKin(*(MyGenKin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenKin G__TMyGenKin;
static int G__eventdict_413_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenKin*) (soff+(sizeof(MyGenKin)*i)))->~G__TMyGenKin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenKin*) (soff))->~G__TMyGenKin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_413_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* dest = (MyGenKin*) G__getstructoffset();
   *dest = *(MyGenKin*) libp->para[0].ref;
   const MyGenKin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPart */
static int G__eventdict_467_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart[n];
     } else {
       p = new((void*) gvp) MyPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart;
     } else {
       p = new((void*) gvp) MyPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_467_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_467_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPart(*(MyPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPart G__TMyPart;
static int G__eventdict_467_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPart*) (soff+(sizeof(MyPart)*i)))->~G__TMyPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPart*) (soff))->~G__TMyPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_467_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* dest = (MyPart*) G__getstructoffset();
   *dest = *(MyPart*) libp->para[0].ref;
   const MyPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenPart */
static int G__eventdict_468_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart[n];
     } else {
       p = new((void*) gvp) MyGenPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart;
     } else {
       p = new((void*) gvp) MyGenPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_468_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_468_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenPart(*(MyGenPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenPart G__TMyGenPart;
static int G__eventdict_468_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenPart*) (soff+(sizeof(MyGenPart)*i)))->~G__TMyGenPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenPart*) (soff))->~G__TMyGenPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_468_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* dest = (MyGenPart*) G__getstructoffset();
   *dest = *(MyGenPart*) libp->para[0].ref;
   const MyGenPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenJet */
static int G__eventdict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet[n];
     } else {
       p = new((void*) gvp) MyGenJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet;
     } else {
       p = new((void*) gvp) MyGenJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenJet(*(MyGenJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenJet G__TMyGenJet;
static int G__eventdict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenJet*) (soff+(sizeof(MyGenJet)*i)))->~G__TMyGenJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenJet*) (soff))->~G__TMyGenJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_469_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* dest = (MyGenJet*) G__getstructoffset();
   *dest = *(MyGenJet*) libp->para[0].ref;
   const MyGenJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenPart,allocator<MyGenPart> > */
static int G__eventdict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *((MyGenPart*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >;
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator=(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->reserve((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->push_back(*(MyGenPart*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->swap(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *(MyGenPart*) libp->para[1].ref);
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), (vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[1])
, *(MyGenPart*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_471_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenPart,allocator<MyGenPart> > G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR;
static int G__eventdict_471_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenPart,allocator<MyGenPart> >*) (soff+(sizeof(vector<MyGenPart,allocator<MyGenPart> >)*i)))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenPart,allocator<MyGenPart> >*) (soff))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyVertex */
static int G__eventdict_474_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex[n];
     } else {
       p = new((void*) gvp) MyVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex;
     } else {
       p = new((void*) gvp) MyVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_474_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_474_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyVertex(*(MyVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyVertex G__TMyVertex;
static int G__eventdict_474_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyVertex*) (soff+(sizeof(MyVertex)*i)))->~G__TMyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyVertex*) (soff))->~G__TMyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_474_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* dest = (MyVertex*) G__getstructoffset();
   *dest = *(MyVertex*) libp->para[0].ref;
   const MyVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MySimVertex */
static int G__eventdict_475_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex[n];
     } else {
       p = new((void*) gvp) MySimVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex;
     } else {
       p = new((void*) gvp) MySimVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MySimVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MySimVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MySimVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_475_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_475_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MySimVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MySimVertex(*(MySimVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MySimVertex G__TMySimVertex;
static int G__eventdict_475_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MySimVertex*) (soff+(sizeof(MySimVertex)*i)))->~G__TMySimVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MySimVertex*) (soff))->~G__TMySimVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_475_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* dest = (MySimVertex*) G__getstructoffset();
   *dest = *(MySimVertex*) libp->para[0].ref;
   const MySimVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyBeamSpot */
static int G__eventdict_476_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot[n];
     } else {
       p = new((void*) gvp) MyBeamSpot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot;
     } else {
       p = new((void*) gvp) MyBeamSpot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyBeamSpot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyBeamSpot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyBeamSpot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_476_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_476_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyBeamSpot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyBeamSpot(*(MyBeamSpot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyBeamSpot G__TMyBeamSpot;
static int G__eventdict_476_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyBeamSpot*) (soff+(sizeof(MyBeamSpot)*i)))->~G__TMyBeamSpot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyBeamSpot*) (soff))->~G__TMyBeamSpot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_476_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* dest = (MyBeamSpot*) G__getstructoffset();
   *dest = *(MyBeamSpot*) libp->para[0].ref;
   const MyBeamSpot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorDigi */
static int G__eventdict_477_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorDigi[n];
     } else {
       p = new((void*) gvp) MyCastorDigi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorDigi;
     } else {
       p = new((void*) gvp) MyCastorDigi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorDigi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorDigi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorDigi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorDigi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_477_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorDigi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_477_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorDigi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorDigi(*(MyCastorDigi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorDigi G__TMyCastorDigi;
static int G__eventdict_477_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorDigi*) (soff+(sizeof(MyCastorDigi)*i)))->~G__TMyCastorDigi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorDigi*) (soff))->~G__TMyCastorDigi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_477_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorDigi* dest = (MyCastorDigi*) G__getstructoffset();
   *dest = *(MyCastorDigi*) libp->para[0].ref;
   const MyCastorDigi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorRecHit */
static int G__eventdict_478_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorRecHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorRecHit[n];
     } else {
       p = new((void*) gvp) MyCastorRecHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorRecHit;
     } else {
       p = new((void*) gvp) MyCastorRecHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorRecHit*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorRecHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorRecHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorRecHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorRecHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorRecHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_478_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorRecHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_478_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorRecHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorRecHit(*(MyCastorRecHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorRecHit G__TMyCastorRecHit;
static int G__eventdict_478_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorRecHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorRecHit*) (soff+(sizeof(MyCastorRecHit)*i)))->~G__TMyCastorRecHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorRecHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorRecHit*) (soff))->~G__TMyCastorRecHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_478_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorRecHit* dest = (MyCastorRecHit*) G__getstructoffset();
   *dest = *(MyCastorRecHit*) libp->para[0].ref;
   const MyCastorRecHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorTower */
static int G__eventdict_479_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorTower* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorTower[n];
     } else {
       p = new((void*) gvp) MyCastorTower[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorTower;
     } else {
       p = new((void*) gvp) MyCastorTower;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorTower*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorTower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorTower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorTower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorTower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorTower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorTower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorTower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorTower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_479_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorTower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_479_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorTower* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorTower(*(MyCastorTower*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorTower G__TMyCastorTower;
static int G__eventdict_479_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorTower*) (soff+(sizeof(MyCastorTower)*i)))->~G__TMyCastorTower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorTower*) (soff))->~G__TMyCastorTower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_479_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorTower* dest = (MyCastorTower*) G__getstructoffset();
   *dest = *(MyCastorTower*) libp->para[0].ref;
   const MyCastorTower& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorJet */
static int G__eventdict_480_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorJet[n];
     } else {
       p = new((void*) gvp) MyCastorJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorJet;
     } else {
       p = new((void*) gvp) MyCastorJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_480_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_480_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorJet(*(MyCastorJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorJet G__TMyCastorJet;
static int G__eventdict_480_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorJet*) (soff+(sizeof(MyCastorJet)*i)))->~G__TMyCastorJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorJet*) (soff))->~G__TMyCastorJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_480_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorJet* dest = (MyCastorJet*) G__getstructoffset();
   *dest = *(MyCastorJet*) libp->para[0].ref;
   const MyCastorJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyJet */
static int G__eventdict_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet[n];
     } else {
       p = new((void*) gvp) MyJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet;
     } else {
       p = new((void*) gvp) MyJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyJet(*(MyJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyJet G__TMyJet;
static int G__eventdict_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyJet*) (soff+(sizeof(MyJet)*i)))->~G__TMyJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyJet*) (soff))->~G__TMyJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_481_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* dest = (MyJet*) G__getstructoffset();
   *dest = *(MyJet*) libp->para[0].ref;
   const MyJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTrackJet */
static int G__eventdict_482_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrackJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrackJet[n];
     } else {
       p = new((void*) gvp) MyTrackJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrackJet;
     } else {
       p = new((void*) gvp) MyTrackJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrackJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrackJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTrackJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTrackJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTrackJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrackJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrackJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrackJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_482_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTrackJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTrackJet(*(MyTrackJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTrackJet G__TMyTrackJet;
static int G__eventdict_482_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTrackJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTrackJet*) (soff+(sizeof(MyTrackJet)*i)))->~G__TMyTrackJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTrackJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTrackJet*) (soff))->~G__TMyTrackJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_482_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrackJet* dest = (MyTrackJet*) G__getstructoffset();
   *dest = *(MyTrackJet*) libp->para[0].ref;
   const MyTrackJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyDiJet */
static int G__eventdict_483_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyDiJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyDiJet[n];
     } else {
       p = new((void*) gvp) MyDiJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyDiJet;
     } else {
       p = new((void*) gvp) MyDiJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyDiJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyDiJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyDiJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyDiJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_483_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyDiJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_483_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyDiJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyDiJet(*(MyDiJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyDiJet G__TMyDiJet;
static int G__eventdict_483_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyDiJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyDiJet*) (soff+(sizeof(MyDiJet)*i)))->~G__TMyDiJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyDiJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyDiJet*) (soff))->~G__TMyDiJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_483_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyDiJet* dest = (MyDiJet*) G__getstructoffset();
   *dest = *(MyDiJet*) libp->para[0].ref;
   const MyDiJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCaloTower */
static int G__eventdict_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloTower* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloTower[n];
     } else {
       p = new((void*) gvp) MyCaloTower[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloTower;
     } else {
       p = new((void*) gvp) MyCaloTower;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCaloTower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCaloTower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCaloTower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCaloTower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloTower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_484_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloTower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_484_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCaloTower* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCaloTower(*(MyCaloTower*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCaloTower G__TMyCaloTower;
static int G__eventdict_484_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCaloTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCaloTower*) (soff+(sizeof(MyCaloTower)*i)))->~G__TMyCaloTower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCaloTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCaloTower*) (soff))->~G__TMyCaloTower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_484_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloTower* dest = (MyCaloTower*) G__getstructoffset();
   *dest = *(MyCaloTower*) libp->para[0].ref;
   const MyCaloTower& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenJet,allocator<MyGenJet> > */
static int G__eventdict_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->at((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *((MyGenJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator[]((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >;
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenJet,allocator<MyGenJet> >& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator=(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->reserve((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->push_back(*(MyGenJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->swap(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *(MyGenJet*) libp->para[1].ref);
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), (vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[1])
, *(MyGenJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenJet,allocator<MyGenJet> > G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR;
static int G__eventdict_486_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenJet,allocator<MyGenJet> >*) (soff+(sizeof(vector<MyGenJet,allocator<MyGenJet> >)*i)))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenJet,allocator<MyGenJet> >*) (soff))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyVertex,allocator<MyVertex> > */
static int G__eventdict_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *((MyVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >;
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator=(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->reserve((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->push_back(*(MyVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->swap(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *(MyVertex*) libp->para[1].ref);
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), (vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[1])
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyVertex,allocator<MyVertex> > G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR;
static int G__eventdict_490_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyVertex,allocator<MyVertex> >*) (soff+(sizeof(vector<MyVertex,allocator<MyVertex> >)*i)))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyVertex,allocator<MyVertex> >*) (soff))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorDigi,allocator<MyCastorDigi> > */
static int G__eventdict_494_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->at((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->resize((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->resize((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *((MyCastorDigi*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->operator[]((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >;
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *(MyCastorDigi*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *(MyCastorDigi*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorDigi,allocator<MyCastorDigi> >(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorDigi,allocator<MyCastorDigi> >(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorDigi,allocator<MyCastorDigi> >& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->operator=(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->reserve((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->push_back(*(MyCastorDigi*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->swap(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *(MyCastorDigi*) libp->para[1].ref);
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), (vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[1])
, *(MyCastorDigi*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->erase(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->erase(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_494_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorDigi,allocator<MyCastorDigi> > G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR;
static int G__eventdict_494_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorDigi,allocator<MyCastorDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) (soff+(sizeof(vector<MyCastorDigi,allocator<MyCastorDigi> >)*i)))->~G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorDigi,allocator<MyCastorDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) (soff))->~G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
static int G__eventdict_498_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->at((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->resize((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->resize((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *((MyCastorRecHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->operator[]((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >;
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *(MyCastorRecHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *(MyCastorRecHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorRecHit,allocator<MyCastorRecHit> >& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->operator=(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->reserve((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->push_back(*(MyCastorRecHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->swap(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *(MyCastorRecHit*) libp->para[1].ref);
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), (vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[1])
, *(MyCastorRecHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->erase(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->erase(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorRecHit,allocator<MyCastorRecHit> > G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR;
static int G__eventdict_498_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) (soff+(sizeof(vector<MyCastorRecHit,allocator<MyCastorRecHit> >)*i)))->~G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) (soff))->~G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorTower,allocator<MyCastorTower> > */
static int G__eventdict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorTower& obj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->at((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator* pobj;
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator xobj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorTower,allocator<MyCastorTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator* pobj;
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator xobj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorTower,allocator<MyCastorTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator* pobj;
         vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator xobj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator* pobj;
         vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator xobj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->resize((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->resize((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]), *((MyCastorTower*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorTower& obj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->operator[]((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorTower,allocator<MyCastorTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorTower,allocator<MyCastorTower> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorTower,allocator<MyCastorTower> >;
     } else {
       p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorTower,allocator<MyCastorTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorTower,allocator<MyCastorTower> >((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]), *(MyCastorTower*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]), *(MyCastorTower*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorTower,allocator<MyCastorTower> >((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorTower,allocator<MyCastorTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorTower,allocator<MyCastorTower> >(*(vector<MyCastorTower,allocator<MyCastorTower> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >(*(vector<MyCastorTower,allocator<MyCastorTower> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorTower,allocator<MyCastorTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorTower,allocator<MyCastorTower> >(*((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorTower,allocator<MyCastorTower> >(*((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorTower,allocator<MyCastorTower> >& obj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->operator=(*(vector<MyCastorTower,allocator<MyCastorTower> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->reserve((vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorTower& obj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorTower& obj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->push_back(*(MyCastorTower*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->swap(*(vector<MyCastorTower,allocator<MyCastorTower> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator* pobj;
         vector<MyCastorTower,allocator<MyCastorTower> >::iterator xobj = ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->insert(*((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[0])), *(MyCastorTower*) libp->para[1].ref);
         pobj = new vector<MyCastorTower,allocator<MyCastorTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->insert(*((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->insert(*((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[0])), (vector<MyCastorTower,allocator<MyCastorTower> >::size_type) G__int(libp->para[1])
, *(MyCastorTower*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->erase(*((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->erase(*((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorTower,allocator<MyCastorTower> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorTower,allocator<MyCastorTower> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorTower,allocator<MyCastorTower> > G__TvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR;
static int G__eventdict_502_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorTower,allocator<MyCastorTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorTower,allocator<MyCastorTower> >*) (soff+(sizeof(vector<MyCastorTower,allocator<MyCastorTower> >)*i)))->~G__TvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorTower,allocator<MyCastorTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorTower,allocator<MyCastorTower> >*) (soff))->~G__TvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorJet,allocator<MyCastorJet> > */
static int G__eventdict_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->at((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->resize((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->resize((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *((MyCastorJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->operator[]((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >;
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *(MyCastorJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *(MyCastorJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorJet,allocator<MyCastorJet> >(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorJet,allocator<MyCastorJet> >(*((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >(*((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorJet,allocator<MyCastorJet> >& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->operator=(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->reserve((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->push_back(*(MyCastorJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->swap(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *(MyCastorJet*) libp->para[1].ref);
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), (vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[1])
, *(MyCastorJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->erase(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->erase(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_506_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorJet,allocator<MyCastorJet> > G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR;
static int G__eventdict_506_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorJet,allocator<MyCastorJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorJet,allocator<MyCastorJet> >*) (soff+(sizeof(vector<MyCastorJet,allocator<MyCastorJet> >)*i)))->~G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorJet,allocator<MyCastorJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorJet,allocator<MyCastorJet> >*) (soff))->~G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyJet,allocator<MyJet> > */
static int G__eventdict_510_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->at((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *((MyJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator[]((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >;
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator=(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->reserve((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->push_back(*(MyJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->swap(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *(MyJet*) libp->para[1].ref);
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), (vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[1])
, *(MyJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_510_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyJet,allocator<MyJet> > G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR;
static int G__eventdict_510_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyJet,allocator<MyJet> >*) (soff+(sizeof(vector<MyJet,allocator<MyJet> >)*i)))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyJet,allocator<MyJet> >*) (soff))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTrackJet,allocator<MyTrackJet> > */
static int G__eventdict_514_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->at((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->resize((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->resize((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *((MyTrackJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->operator[]((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >;
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *(MyTrackJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *(MyTrackJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrackJet,allocator<MyTrackJet> >(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrackJet,allocator<MyTrackJet> >(*((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >(*((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrackJet,allocator<MyTrackJet> >& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->operator=(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->reserve((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->push_back(*(MyTrackJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->swap(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *(MyTrackJet*) libp->para[1].ref);
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), (vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[1])
, *(MyTrackJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->erase(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->erase(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTrackJet,allocator<MyTrackJet> > G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR;
static int G__eventdict_514_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTrackJet,allocator<MyTrackJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTrackJet,allocator<MyTrackJet> >*) (soff+(sizeof(vector<MyTrackJet,allocator<MyTrackJet> >)*i)))->~G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTrackJet,allocator<MyTrackJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTrackJet,allocator<MyTrackJet> >*) (soff))->~G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCaloTower,allocator<MyCaloTower> > */
static int G__eventdict_518_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->at((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->end();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->resize((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->resize((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *((MyCaloTower*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->operator[]((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >[n];
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >;
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *(MyCaloTower*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *(MyCaloTower*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloTower,allocator<MyCaloTower> >(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloTower,allocator<MyCaloTower> >(*((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >(*((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloTower,allocator<MyCaloTower> >& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->operator=(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->reserve((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->push_back(*(MyCaloTower*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->swap(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *(MyCaloTower*) libp->para[1].ref);
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), (vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[1])
, *(MyCaloTower*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->erase(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->erase(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_518_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCaloTower,allocator<MyCaloTower> > G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR;
static int G__eventdict_518_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCaloTower,allocator<MyCaloTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCaloTower,allocator<MyCaloTower> >*) (soff+(sizeof(vector<MyCaloTower,allocator<MyCaloTower> >)*i)))->~G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCaloTower,allocator<MyCaloTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCaloTower,allocator<MyCaloTower> >*) (soff))->~G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyEvtId */

/* MyL1Trig */

/* MyHLTrig */

/* MyGenKin */

/* MyPart */

/* MyGenPart */

/* MyGenJet */

/* vector<MyGenPart,allocator<MyGenPart> > */

/* MyVertex */

/* MySimVertex */

/* MyBeamSpot */

/* MyCastorDigi */

/* MyCastorRecHit */

/* MyCastorTower */

/* MyCastorJet */

/* MyJet */

/* MyTrackJet */

/* MyDiJet */

/* MyCaloTower */

/* vector<MyGenJet,allocator<MyGenJet> > */

/* vector<MyVertex,allocator<MyVertex> > */

/* vector<MyCastorDigi,allocator<MyCastorDigi> > */

/* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */

/* vector<MyCastorTower,allocator<MyCastorTower> > */

/* vector<MyCastorJet,allocator<MyCastorJet> > */

/* vector<MyJet,allocator<MyJet> > */

/* vector<MyTrackJet,allocator<MyTrackJet> > */

/* vector<MyCaloTower,allocator<MyCaloTower> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyEvtId))) {
     MyEvtId *G__Lderived;
     G__Lderived=(MyEvtId*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig))) {
     MyL1Trig *G__Lderived;
     G__Lderived=(MyL1Trig*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig))) {
     MyHLTrig *G__Lderived;
     G__Lderived=(MyHLTrig*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenKin))) {
     MyGenKin *G__Lderived;
     G__Lderived=(MyGenKin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPart))) {
     MyPart *G__Lderived;
     G__Lderived=(MyPart*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenPart))) {
     MyGenPart *G__Lderived;
     G__Lderived=(MyGenPart*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenJet))) {
     MyGenJet *G__Lderived;
     G__Lderived=(MyGenJet*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyVertex))) {
     MyVertex *G__Lderived;
     G__Lderived=(MyVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MySimVertex))) {
     MySimVertex *G__Lderived;
     G__Lderived=(MySimVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot))) {
     MyBeamSpot *G__Lderived;
     G__Lderived=(MyBeamSpot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi))) {
     MyCastorDigi *G__Lderived;
     G__Lderived=(MyCastorDigi*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit))) {
     MyCastorRecHit *G__Lderived;
     G__Lderived=(MyCastorRecHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorTower))) {
     MyCastorTower *G__Lderived;
     G__Lderived=(MyCastorTower*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet))) {
     MyCastorJet *G__Lderived;
     G__Lderived=(MyCastorJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyJet))) {
     MyJet *G__Lderived;
     G__Lderived=(MyJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet))) {
     MyTrackJet *G__Lderived;
     G__Lderived=(MyTrackJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyDiJet))) {
     MyDiJet *G__Lderived;
     G__Lderived=(MyDiJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower))) {
     MyCaloTower *G__Lderived;
     G__Lderived=(MyCaloTower*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TrigMap",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   G__setnewtype(-1,"-- string name, unsigned bit",0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenPart>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorDigi>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorRecHit>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorTower>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorTower),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTrackJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCaloTower>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyEvtId */
static void G__setup_memvarMyEvtId(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   { MyEvtId *p; p=(MyEvtId*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Evt)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Evt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LumiBlock)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"LumiBlock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),109,0,0,-1,G__defined_typename("TimeValue_t"),-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsData)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ExpType)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ExpType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bunch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Bunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Orbit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Orbit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumiErr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumiErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IstLumiPerBX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"IstLumiPerBX=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyL1Trig */
static void G__setup_memvarMyL1Trig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   { MyL1Trig *p; p=(MyL1Trig*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(4096).Format("bit_max=%lluULL",(unsigned long long)MyL1Trig::bit_max).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhysMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("TrigMap"),-1,1,"fPhysMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhysMask)-(long)(p)),103,0,0,-1,-1,-1,1,"fPhysMask[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhysDecisionBefore)-(long)(p)),103,0,0,-1,-1,-1,1,"fPhysDecisionBefore[128]=",0,"-- L1 algorithm decision, not considering the mask");
   G__memvar_setup((void*)((long)(&p->fPhysDecisionAfter)-(long)(p)),103,0,0,-1,-1,-1,1,"fPhysDecisionAfter[128]=",0,"-- L1 algorithm decision, considering the mask");
   G__memvar_setup((void*)((long)(&p->fPhysPrescale)-(long)(p)),104,0,0,-1,-1,-1,1,"fPhysPrescale[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhysAlias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"fPhysAlias[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTechMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("TrigMap"),-1,1,"fTechMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTechMask)-(long)(p)),103,0,0,-1,-1,-1,1,"fTechMask[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTechDecisionBefore)-(long)(p)),103,0,0,-1,-1,-1,1,"fTechDecisionBefore[64]=",0,"-- L1 algorithm decision, not considering the mask");
   G__memvar_setup((void*)((long)(&p->fTechDecisionAfter)-(long)(p)),103,0,0,-1,-1,-1,1,"fTechDecisionAfter[64]=",0,"-- L1 algorithm decision, considering the mask");
   G__memvar_setup((void*)((long)(&p->fTechPrescale)-(long)(p)),104,0,0,-1,-1,-1,1,"fTechPrescale[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTechAlias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"fTechAlias[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyHLTrig */
static void G__setup_memvarMyHLTrig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   { MyHLTrig *p; p=(MyHLTrig*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->HLTmap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),G__defined_typename("map<string,bool>"),-1,1,"HLTmap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLTprescale)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<string,double>"),-1,1,"HLTprescale=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenKin */
static void G__setup_memvarMyGenKin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   { MyGenKin *p; p=(MyGenKin*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ProcessId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ProcessId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PtHat)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PtHat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x1=",0,"-- fraction of beam momentum carried by first parton ");
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x2=",0,"-- fraction of beam momentum carried by second parton");
   G__memvar_setup((void*)((long)(&p->Q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Q=",0,"-- Q-scale used in evaluation of PDFs (in GeV)");
   G__memvar_setup((void*)((long)(&p->Idparton1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Idparton1=",0,"-- flavour code of first parton");
   G__memvar_setup((void*)((long)(&p->Idparton2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Idparton2=",0,"-- flavour code of second parton");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyPart */
static void G__setup_memvarMyPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   { MyPart *p; p=(MyPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenPart */
static void G__setup_memvarMyGenPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   { MyGenPart *p; p=(MyGenPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenJet */
static void G__setup_memvarMyGenJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   { MyGenJet *p; p=(MyGenJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->npart)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetPart)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),G__defined_typename("vector<MyGenPart>"),-1,1,"JetPart=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenPart,allocator<MyGenPart> > */
static void G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   { vector<MyGenPart,allocator<MyGenPart> > *p; p=(vector<MyGenPart,allocator<MyGenPart> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* MyVertex */
static void G__setup_memvarMyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   { MyVertex *p; p=(MyVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rho)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->erho)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"erho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validity)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"validity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGoodVertex)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isGoodVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MySimVertex */
static void G__setup_memvarMySimVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   { MySimVertex *p; p=(MySimVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyBeamSpot */
static void G__setup_memvarMyBeamSpot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   { MyBeamSpot *p; p=(MyBeamSpot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->esigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"esigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorDigi */
static void G__setup_memvarMyCastorDigi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   { MyCastorDigi *p; p=(MyCastorDigi*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"adc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"fC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cha)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cha=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorRecHit */
static void G__setup_memvarMyCastorRecHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   { MyCastorRecHit *p; p=(MyCastorRecHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cha)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cha=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smearing)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"smearing=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy_smeared)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy_smeared=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC_smeared)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fC_smeared=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorTower */
static void G__setup_memvarMyCastorTower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorTower));
   { MyCastorTower *p; p=(MyCastorTower*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"depth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fhot)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ncell)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ncell=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorJet */
static void G__setup_memvarMyCastorJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   { MyCastorJet *p; p=(MyCastorJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->width)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"depth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fhot)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntower)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyJet */
static void G__setup_memvarMyJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   { MyJet *p; p=(MyJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->e_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jec)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jec_unc)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec_unc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fhad_ch)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad_ch=",0,"-- chargedHadronEnergyFraction()  ");
   G__memvar_setup((void*)((long)(&p->fhad_ne)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad_ne=",0,"-- neutralHadronEnergyFraction() ");
   G__memvar_setup((void*)((long)(&p->fem_ch)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem_ch=",0,"-- chargedEmEnergyFraction() ");
   G__memvar_setup((void*)((long)(&p->fem_ne)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem_ne=",0,"-- neutralEmEnergyFraction() ");
   G__memvar_setup((void*)((long)(&p->multi_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ch=",0,"-- chargedMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_ne)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ne=",0,"-- neutralMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_ch_had)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ch_had=",0,"-- chargedHadronMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_ne_had)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ne_had=",0,"-- neutralHadronMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_gamma)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_gamma=",0,"-- photonMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_ele)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ele=",0,"-- electronMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->multi_mu)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_mu=",0,"-- muonMultiplicity() ");
   G__memvar_setup((void*)((long)(&p->fem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem=",0,"-- emEnergyFraction() (for PFJet: fem_ch + fem_ne)");
   G__memvar_setup((void*)((long)(&p->eem_EB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_EB=",0,"-- emEnergyInEB()");
   G__memvar_setup((void*)((long)(&p->eem_EE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_EE=",0,"-- emEnergyInEE()");
   G__memvar_setup((void*)((long)(&p->eem_HF)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_HF=",0,"-- emEnergyInHF()");
   G__memvar_setup((void*)((long)(&p->fhad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad=",0,"-- energyFractionHadronic()  (for PFjet: fhad_ch + fhad_ne)");
   G__memvar_setup((void*)((long)(&p->ehad_HB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HB=",0,"-- hadEnergyInHB()");
   G__memvar_setup((void*)((long)(&p->ehad_HE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HE=",0,"-- hadEnergyInHE()");
   G__memvar_setup((void*)((long)(&p->ehad_HF)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HF=",0,"-- hadEnergyInHF()");
   G__memvar_setup((void*)((long)(&p->ehad_HO)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HO=",0,"-- hadEnergyInHO()");
   G__memvar_setup((void*)((long)(&p->n60)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n60=",0,"-- n60()");
   G__memvar_setup((void*)((long)(&p->n90)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n90=",0,"-- n90()");
   G__memvar_setup((void*)((long)(&p->emax_ecal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emax_ecal=",0,"-- maxEInEmTowers()");
   G__memvar_setup((void*)((long)(&p->emax_hcal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emax_hcal=",0,"-- maxEInHadTowers() ");
   G__memvar_setup((void*)((long)(&p->n90hits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n90hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HPD)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HPD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RBX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RBX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nconstituent)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"nconstituent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightPFJetId)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TightPFJetId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseCaloJetId)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"LooseCaloJetId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightCaloJetId)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TightCaloJetId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTrackJet */
static void G__setup_memvarMyTrackJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   { MyTrackJet *p; p=(MyTrackJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->e_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jec)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jec_unc)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec_unc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"pv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyDiJet */
static void G__setup_memvarMyDiJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   { MyDiJet *p; p=(MyDiJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->isDiJet)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isDiJet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->posJet1)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"posJet1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->posJet2)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"posJet2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCaloTower */
static void G__setup_memvarMyCaloTower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   { MyCaloTower *p; p=(MyCaloTower*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->emEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"hadEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasEB)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasEB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasEE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasEE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHB)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHF)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zside)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"zside=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenJet,allocator<MyGenJet> > */
static void G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   { vector<MyGenJet,allocator<MyGenJet> > *p; p=(vector<MyGenJet,allocator<MyGenJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyVertex,allocator<MyVertex> > */
static void G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   { vector<MyVertex,allocator<MyVertex> > *p; p=(vector<MyVertex,allocator<MyVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorDigi,allocator<MyCastorDigi> > */
static void G__setup_memvarvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   { vector<MyCastorDigi,allocator<MyCastorDigi> > *p; p=(vector<MyCastorDigi,allocator<MyCastorDigi> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
static void G__setup_memvarvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   { vector<MyCastorRecHit,allocator<MyCastorRecHit> > *p; p=(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorTower,allocator<MyCastorTower> > */
static void G__setup_memvarvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   { vector<MyCastorTower,allocator<MyCastorTower> > *p; p=(vector<MyCastorTower,allocator<MyCastorTower> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorJet,allocator<MyCastorJet> > */
static void G__setup_memvarvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   { vector<MyCastorJet,allocator<MyCastorJet> > *p; p=(vector<MyCastorJet,allocator<MyCastorJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyJet,allocator<MyJet> > */
static void G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   { vector<MyJet,allocator<MyJet> > *p; p=(vector<MyJet,allocator<MyJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyTrackJet,allocator<MyTrackJet> > */
static void G__setup_memvarvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   { vector<MyTrackJet,allocator<MyTrackJet> > *p; p=(vector<MyTrackJet,allocator<MyTrackJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCaloTower,allocator<MyCaloTower> > */
static void G__setup_memvarvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   { vector<MyCaloTower,allocator<MyCaloTower> > *p; p=(vector<MyCaloTower,allocator<MyCaloTower> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyEvtId(void) {
   /* MyEvtId */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   G__memfunc_setup("MyEvtId",674,G__eventdict_161_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_161_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_161_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_161_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyEvtId::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_161_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_161_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyEvtId::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_161_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyEvtId::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_161_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_161_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_161_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_161_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_161_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyEvtId", 674, G__eventdict_161_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyEvtId", 800, G__eventdict_161_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_161_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyL1Trig(void) {
   /* MyL1Trig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   G__memfunc_setup("MyL1Trig",729,G__eventdict_397_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_397_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_397_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhys",720,G__eventdict_397_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'string' - 0 - name h - - 0 - - "
"g - - 0 - mask g - - 0 - decisionBeforeMask "
"g - - 0 - decisionAfterMask h - - 0 - - "
"u 'string' - 0 - alias", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysName",1093,G__eventdict_397_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysMask",1104,G__eventdict_397_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionBefore",2117,G__eventdict_397_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionAfter",2020,G__eventdict_397_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysPrescale",1523,G__eventdict_397_0_9, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysAlias",1198,G__eventdict_397_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysBit",995,G__eventdict_397_0_11, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysMaskByName",1676,G__eventdict_397_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionBeforeByName",2689,G__eventdict_397_0_13, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionAfterByName",2592,G__eventdict_397_0_14, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysPrescaleByName",2095,G__eventdict_397_0_15, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysAliasByName",1770,G__eventdict_397_0_16, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTech",688,G__eventdict_397_0_17, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'string' - 0 - name h - - 0 - - "
"g - - 0 - mask g - - 0 - decisionBeforeMask "
"g - - 0 - decisionAfterMask h - - 0 - - "
"u 'string' - 0 - alias", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechName",1061,G__eventdict_397_0_18, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechMask",1072,G__eventdict_397_0_19, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionBefore",2085,G__eventdict_397_0_20, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionAfter",1988,G__eventdict_397_0_21, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechPrescale",1491,G__eventdict_397_0_22, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechAlias",1166,G__eventdict_397_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechBit",963,G__eventdict_397_0_24, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechMaskByName",1644,G__eventdict_397_0_25, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionBeforeByName",2657,G__eventdict_397_0_26, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionAfterByName",2560,G__eventdict_397_0_27, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechPrescaleByName",2063,G__eventdict_397_0_28, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechAliasByName",1738,G__eventdict_397_0_29, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_397_0_30, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyL1Trig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_397_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_397_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyL1Trig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_397_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyL1Trig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_397_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_397_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_397_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1Trig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_397_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_397_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1Trig::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyL1Trig", 729, G__eventdict_397_0_42, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyL1Trig", 855, G__eventdict_397_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_397_0_44, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 1, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyHLTrig(void) {
   /* MyHLTrig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   G__memfunc_setup("MyHLTrig",752,G__eventdict_405_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_405_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyHLTrig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_405_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_405_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyHLTrig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_405_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyHLTrig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_405_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_405_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_405_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyHLTrig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_405_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_405_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyHLTrig::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyHLTrig", 752, G__eventdict_405_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 0, 1, 1, 1, 0, "u 'MyHLTrig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyHLTrig", 878, G__eventdict_405_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_405_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 1, 1, 1, 1, 0, "u 'MyHLTrig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenKin(void) {
   /* MyGenKin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   G__memfunc_setup("MyGenKin",770,G__eventdict_413_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_413_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_413_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_413_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenKin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_413_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_413_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenKin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_413_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenKin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_413_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_413_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_413_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenKin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_413_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_413_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenKin::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenKin", 770, G__eventdict_413_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenKin", 896, G__eventdict_413_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_413_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 1, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPart(void) {
   /* MyPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   G__memfunc_setup("MyPart",605,G__eventdict_467_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_467_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_467_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_467_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_467_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_467_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_467_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_467_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_467_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_467_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_467_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_467_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPart", 605, G__eventdict_467_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPart", 731, G__eventdict_467_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_467_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenPart(void) {
   /* MyGenPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   G__memfunc_setup("MyGenPart",887,G__eventdict_468_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_468_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_468_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_468_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_468_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_468_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_468_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_468_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_468_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_468_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenPart", 887, G__eventdict_468_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenPart", 1013, G__eventdict_468_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_468_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenJet(void) {
   /* MyGenJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   G__memfunc_setup("MyGenJet",771,G__eventdict_469_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_469_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_469_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_469_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_469_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_469_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_469_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_469_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_469_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_469_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenJet", 771, G__eventdict_469_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenJet", 897, G__eventdict_469_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_469_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   /* vector<MyGenPart,allocator<MyGenPart> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_471_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_471_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_471_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_471_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_471_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_471_0_6, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_471_0_7, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_471_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_471_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz u 'MyGenPart' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_471_0_10, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_471_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_471_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_471_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_471_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n u 'MyGenPart' - 11 'MyGenPart()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_471_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_471_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_471_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_471_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_471_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_471_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_471_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_471_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_471_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_471_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first "
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_471_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n "
"u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_471_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_471_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_471_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_471_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenPart,allocator<MyGenPart> >", 3840, G__eventdict_471_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyVertex(void) {
   /* MyVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   G__memfunc_setup("MyVertex",836,G__eventdict_474_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_474_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_474_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_474_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_474_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_474_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_474_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_474_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_474_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_474_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_474_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyVertex", 836, G__eventdict_474_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyVertex", 962, G__eventdict_474_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_474_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMySimVertex(void) {
   /* MySimVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   G__memfunc_setup("MySimVertex",1133,G__eventdict_475_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_475_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_475_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MySimVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_475_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_475_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MySimVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_475_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MySimVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_475_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_475_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_475_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_475_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_475_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MySimVertex", 1133, G__eventdict_475_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MySimVertex", 1259, G__eventdict_475_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_475_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 1, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyBeamSpot(void) {
   /* MyBeamSpot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   G__memfunc_setup("MyBeamSpot",993,G__eventdict_476_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_476_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_476_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyBeamSpot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_476_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_476_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyBeamSpot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_476_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyBeamSpot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_476_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_476_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_476_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_476_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_476_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyBeamSpot", 993, G__eventdict_476_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyBeamSpot", 1119, G__eventdict_476_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_476_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorDigi(void) {
   /* MyCastorDigi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   G__memfunc_setup("MyCastorDigi",1199,G__eventdict_477_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_477_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_477_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_477_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorDigi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_477_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_477_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorDigi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_477_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorDigi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_477_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_477_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_477_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorDigi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_477_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_477_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorDigi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorDigi", 1199, G__eventdict_477_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 0, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorDigi", 1325, G__eventdict_477_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_477_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorRecHit(void) {
   /* MyCastorRecHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   G__memfunc_setup("MyCastorRecHit",1393,G__eventdict_478_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_478_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_478_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorRecHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_478_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_478_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorRecHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_478_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorRecHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_478_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_478_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_478_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorRecHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_478_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_478_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorRecHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorRecHit", 1393, G__eventdict_478_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 0, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorRecHit", 1519, G__eventdict_478_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_478_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorTower(void) {
   /* MyCastorTower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorTower));
   G__memfunc_setup("MyCastorTower",1347,G__eventdict_479_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_479_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_479_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorTower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_479_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorTower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_479_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorTower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_479_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorTower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_479_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_479_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorTower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_479_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorTower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_479_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorTower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_479_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorTower::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorTower", 1347, G__eventdict_479_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 0, 1, 1, 1, 0, "u 'MyCastorTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorTower", 1473, G__eventdict_479_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_479_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 1, 1, 1, 1, 0, "u 'MyCastorTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorJet(void) {
   /* MyCastorJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   G__memfunc_setup("MyCastorJet",1109,G__eventdict_480_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_480_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_480_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_480_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_480_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_480_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_480_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_480_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_480_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_480_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_480_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorJet", 1109, G__eventdict_480_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 0, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorJet", 1235, G__eventdict_480_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_480_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyJet(void) {
   /* MyJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   G__memfunc_setup("MyJet",489,G__eventdict_481_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_481_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_481_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_481_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_481_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_481_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_481_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_481_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_481_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_481_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_481_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyJet", 489, G__eventdict_481_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyJet", 615, G__eventdict_481_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_481_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTrackJet(void) {
   /* MyTrackJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   G__memfunc_setup("MyTrackJet",990,G__eventdict_482_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_482_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__eventdict_482_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_482_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTrackJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_482_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_482_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTrackJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_482_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTrackJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_482_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_482_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_482_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrackJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_482_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_482_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrackJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTrackJet", 990, G__eventdict_482_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 0, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTrackJet", 1116, G__eventdict_482_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_482_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyDiJet(void) {
   /* MyDiJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   G__memfunc_setup("MyDiJet",662,G__eventdict_483_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_483_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_483_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_483_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyDiJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_483_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_483_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyDiJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_483_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyDiJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_483_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_483_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_483_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyDiJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_483_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_483_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyDiJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyDiJet", 662, G__eventdict_483_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 0, 1, 1, 1, 0, "u 'MyDiJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyDiJet", 788, G__eventdict_483_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_483_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 1, 1, 1, 1, 0, "u 'MyDiJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCaloTower(void) {
   /* MyCaloTower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   G__memfunc_setup("MyCaloTower",1110,G__eventdict_484_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_484_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCaloTower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_484_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_484_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCaloTower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_484_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCaloTower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_484_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_484_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_484_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloTower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_484_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_484_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloTower::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCaloTower", 1110, G__eventdict_484_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 0, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCaloTower", 1236, G__eventdict_484_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_484_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   /* vector<MyGenJet,allocator<MyGenJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_486_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_486_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_486_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_486_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_486_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_486_0_6, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_486_0_7, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_486_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_486_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz u 'MyGenJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_486_0_10, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_486_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_486_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_486_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_486_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n u 'MyGenJet' - 11 'MyGenJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_486_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_486_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_486_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_486_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_486_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_486_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_486_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_486_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_486_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_486_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first "
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_486_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n "
"u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_486_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_486_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_486_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_486_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenJet,allocator<MyGenJet> >", 3608, G__eventdict_486_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   /* vector<MyVertex,allocator<MyVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_490_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_490_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_490_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_490_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_490_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_490_0_6, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_490_0_7, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_490_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_490_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz u 'MyVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_490_0_10, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_490_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_490_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_490_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_490_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n u 'MyVertex' - 11 'MyVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_490_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_490_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_490_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_490_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_490_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_490_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_490_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_490_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_490_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_490_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first "
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_490_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n "
"u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_490_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_490_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_490_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_490_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyVertex,allocator<MyVertex> >", 3738, G__eventdict_490_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR(void) {
   /* vector<MyCastorDigi,allocator<MyCastorDigi> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__memfunc_setup("at",213,G__eventdict_494_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_494_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_494_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_494_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_494_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_494_0_6, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_494_0_7, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_494_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_494_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - sz u 'MyCastorDigi' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_494_0_10, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_494_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_494_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_494_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_494_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n u 'MyCastorDigi' - 11 'MyCastorDigi()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_494_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_494_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - first u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_494_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_494_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_494_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_494_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_494_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_494_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_494_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_494_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - first "
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_494_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n "
"u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_494_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_494_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_494_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - first u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_494_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorDigi,allocator<MyCastorDigi> >", 4464, G__eventdict_494_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR(void) {
   /* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_498_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_498_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_498_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_498_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_498_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_498_0_6, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_498_0_7, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_498_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_498_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - sz u 'MyCastorRecHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_498_0_10, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_498_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_498_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_498_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_498_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n u 'MyCastorRecHit' - 11 'MyCastorRecHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_498_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_498_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - first u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_498_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_498_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_498_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_498_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_498_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_498_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_498_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_498_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - first "
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_498_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n "
"u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_498_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_498_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_498_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - first u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_498_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorRecHit,allocator<MyCastorRecHit> >", 4852, G__eventdict_498_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR(void) {
   /* vector<MyCastorTower,allocator<MyCastorTower> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR));
   G__memfunc_setup("at",213,G__eventdict_502_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_502_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_502_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_502_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_502_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorTower,allocator<MyCastorTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_502_0_6, 107, -1, G__defined_typename("vector<MyCastorTower,allocator<MyCastorTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_502_0_7, 107, -1, G__defined_typename("vector<MyCastorTower,allocator<MyCastorTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_502_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_502_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - sz u 'MyCastorTower' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_502_0_10, 107, -1, G__defined_typename("vector<MyCastorTower,allocator<MyCastorTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_502_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_502_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorTower,allocator<MyCastorTower> >",4634,G__eventdict_502_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorTower,allocator<MyCastorTower> >",4634,G__eventdict_502_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - n u 'MyCastorTower' - 11 'MyCastorTower()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorTower,allocator<MyCastorTower> >",4634,G__eventdict_502_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorTower,allocator<MyCastorTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorTower,allocator<MyCastorTower> >",4634,G__eventdict_502_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' 'vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator' 10 - first u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' 'vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_502_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorTower,allocator<MyCastorTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_502_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_502_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_502_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_502_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_502_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorTower,allocator<MyCastorTower> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_502_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - position u 'MyCastorTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_502_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - position u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' 'vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator' 10 - first "
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' 'vector<MyCastorTower,allocator<MyCastorTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_502_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - position k - 'vector<MyCastorTower,allocator<MyCastorTower> >::size_type' 0 - n "
"u 'MyCastorTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_502_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_502_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_502_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - first u 'vector<MyCastorTower,allocator<MyCastorTower> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_502_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorTower,allocator<MyCastorTower> >", 4760, G__eventdict_502_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR(void) {
   /* vector<MyCastorJet,allocator<MyCastorJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_506_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_506_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_506_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_506_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_506_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_506_0_6, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_506_0_7, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_506_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_506_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - sz u 'MyCastorJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_506_0_10, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_506_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_506_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_506_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_506_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n u 'MyCastorJet' - 11 'MyCastorJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_506_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_506_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - first u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_506_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_506_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_506_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_506_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_506_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_506_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_506_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_506_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - first "
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_506_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n "
"u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_506_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_506_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_506_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - first u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_506_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorJet,allocator<MyCastorJet> >", 4284, G__eventdict_506_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   /* vector<MyJet,allocator<MyJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_510_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_510_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_510_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_510_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_510_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_510_0_6, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_510_0_7, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_510_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_510_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz u 'MyJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_510_0_10, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_510_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_510_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_510_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_510_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n u 'MyJet' - 11 'MyJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_510_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_510_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_510_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_510_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_510_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_510_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_510_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_510_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_510_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_510_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first "
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_510_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n "
"u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_510_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_510_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_510_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - first u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_510_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyJet,allocator<MyJet> >", 3044, G__eventdict_510_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR(void) {
   /* vector<MyTrackJet,allocator<MyTrackJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_514_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_514_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_514_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_514_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_514_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_514_0_6, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_514_0_7, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_514_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_514_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - sz u 'MyTrackJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_514_0_10, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_514_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_514_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_514_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_514_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n u 'MyTrackJet' - 11 'MyTrackJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_514_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_514_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - first u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_514_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_514_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_514_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_514_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_514_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_514_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_514_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_514_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - first "
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_514_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n "
"u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_514_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_514_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_514_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - first u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_514_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTrackJet,allocator<MyTrackJet> >", 4046, G__eventdict_514_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR(void) {
   /* vector<MyCaloTower,allocator<MyCaloTower> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__memfunc_setup("at",213,G__eventdict_518_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_518_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_518_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_518_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_518_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_518_0_6, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_518_0_7, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_518_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_518_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - sz u 'MyCaloTower' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_518_0_10, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_518_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_518_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_518_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_518_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n u 'MyCaloTower' - 11 'MyCaloTower()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_518_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_518_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - first u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_518_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_518_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_518_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_518_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_518_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_518_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_518_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_518_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - first "
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_518_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n "
"u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_518_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_518_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_518_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - first u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_518_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCaloTower,allocator<MyCaloTower> >", 4286, G__eventdict_518_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEvtId = { "MyEvtId" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyL1Trig = { "MyL1Trig" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyHLTrig = { "MyHLTrig" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenKin = { "MyGenKin" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPart = { "MyPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenPart = { "MyGenPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenJet = { "MyGenJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR = { "vector<MyGenPart,allocator<MyGenPart> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator = { "vector<MyGenPart,allocator<MyGenPart> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenPart,allocator<MyGenPart> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyVertex = { "MyVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MySimVertex = { "MySimVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyBeamSpot = { "MyBeamSpot" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorDigi = { "MyCastorDigi" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorRecHit = { "MyCastorRecHit" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorTower = { "MyCastorTower" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorJet = { "MyCastorJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyJet = { "MyJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTrackJet = { "MyTrackJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyDiJet = { "MyDiJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCaloTower = { "MyCaloTower" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR = { "vector<MyGenJet,allocator<MyGenJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator = { "vector<MyGenJet,allocator<MyGenJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenJet,allocator<MyGenJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR = { "vector<MyVertex,allocator<MyVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator = { "vector<MyVertex,allocator<MyVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyVertex,allocator<MyVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR = { "vector<MyCastorDigi,allocator<MyCastorDigi> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator = { "vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR = { "vector<MyCastorRecHit,allocator<MyCastorRecHit> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator = { "vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR = { "vector<MyCastorTower,allocator<MyCastorTower> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator = { "vector<MyCastorTower,allocator<MyCastorTower> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorTower,allocator<MyCastorTower> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR = { "vector<MyCastorJet,allocator<MyCastorJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator = { "vector<MyCastorJet,allocator<MyCastorJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorJet,allocator<MyCastorJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR = { "vector<MyJet,allocator<MyJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator = { "vector<MyJet,allocator<MyJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyJet,allocator<MyJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR = { "vector<MyTrackJet,allocator<MyTrackJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator = { "vector<MyTrackJet,allocator<MyTrackJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTrackJet,allocator<MyTrackJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR = { "vector<MyCaloTower,allocator<MyCaloTower> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator = { "vector<MyCaloTower,allocator<MyCaloTower> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCaloTower,allocator<MyCaloTower> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TObject.tagnum = -1 ;
  G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyEvtId.tagnum = -1 ;
  G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyL1Trig.tagnum = -1 ;
  G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyHLTrig.tagnum = -1 ;
  G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyGenKin.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TLorentzVector.tagnum = -1 ;
  G__eventdictLN_MyPart.tagnum = -1 ;
  G__eventdictLN_MyGenPart.tagnum = -1 ;
  G__eventdictLN_MyGenJet.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyVertex.tagnum = -1 ;
  G__eventdictLN_MySimVertex.tagnum = -1 ;
  G__eventdictLN_MyBeamSpot.tagnum = -1 ;
  G__eventdictLN_MyCastorDigi.tagnum = -1 ;
  G__eventdictLN_MyCastorRecHit.tagnum = -1 ;
  G__eventdictLN_MyCastorTower.tagnum = -1 ;
  G__eventdictLN_MyCastorJet.tagnum = -1 ;
  G__eventdictLN_MyJet.tagnum = -1 ;
  G__eventdictLN_MyTrackJet.tagnum = -1 ;
  G__eventdictLN_MyDiJet.tagnum = -1 ;
  G__eventdictLN_MyCaloTower.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyEvtId),sizeof(MyEvtId),-1,292096,(char*)NULL,G__setup_memvarMyEvtId,G__setup_memfuncMyEvtId);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyL1Trig),sizeof(MyL1Trig),-1,292096,(char*)NULL,G__setup_memvarMyL1Trig,G__setup_memfuncMyL1Trig);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyHLTrig),sizeof(MyHLTrig),-1,292096,(char*)NULL,G__setup_memvarMyHLTrig,G__setup_memfuncMyHLTrig);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenKin),sizeof(MyGenKin),-1,292096,(char*)NULL,G__setup_memvarMyGenKin,G__setup_memfuncMyGenKin);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPart),sizeof(MyPart),-1,324864,(char*)NULL,G__setup_memvarMyPart,G__setup_memfuncMyPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenPart),sizeof(MyGenPart),-1,324864,(char*)NULL,G__setup_memvarMyGenPart,G__setup_memfuncMyGenPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenJet),sizeof(MyGenJet),-1,324864,(char*)NULL,G__setup_memvarMyGenJet,G__setup_memfuncMyGenJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),sizeof(vector<MyGenPart,allocator<MyGenPart> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR,G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyVertex),sizeof(MyVertex),-1,292096,(char*)NULL,G__setup_memvarMyVertex,G__setup_memfuncMyVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MySimVertex),sizeof(MySimVertex),-1,292096,(char*)NULL,G__setup_memvarMySimVertex,G__setup_memfuncMySimVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyBeamSpot),sizeof(MyBeamSpot),-1,292096,(char*)NULL,G__setup_memvarMyBeamSpot,G__setup_memfuncMyBeamSpot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorDigi),sizeof(MyCastorDigi),-1,292096,(char*)NULL,G__setup_memvarMyCastorDigi,G__setup_memfuncMyCastorDigi);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorRecHit),sizeof(MyCastorRecHit),-1,292096,(char*)NULL,G__setup_memvarMyCastorRecHit,G__setup_memfuncMyCastorRecHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorTower),sizeof(MyCastorTower),-1,292096,(char*)NULL,G__setup_memvarMyCastorTower,G__setup_memfuncMyCastorTower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorJet),sizeof(MyCastorJet),-1,292096,(char*)NULL,G__setup_memvarMyCastorJet,G__setup_memfuncMyCastorJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyJet),sizeof(MyJet),-1,292096,(char*)NULL,G__setup_memvarMyJet,G__setup_memfuncMyJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyTrackJet),sizeof(MyTrackJet),-1,292096,(char*)NULL,G__setup_memvarMyTrackJet,G__setup_memfuncMyTrackJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyDiJet),sizeof(MyDiJet),-1,292096,(char*)NULL,G__setup_memvarMyDiJet,G__setup_memfuncMyDiJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCaloTower),sizeof(MyCaloTower),-1,324864,(char*)NULL,G__setup_memvarMyCaloTower,G__setup_memfuncMyCaloTower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),sizeof(vector<MyGenJet,allocator<MyGenJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR,G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),sizeof(vector<MyVertex,allocator<MyVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR,G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR),sizeof(vector<MyCastorDigi,allocator<MyCastorDigi> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR,G__setup_memfuncvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR),sizeof(vector<MyCastorRecHit,allocator<MyCastorRecHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR,G__setup_memfuncvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR),sizeof(vector<MyCastorTower,allocator<MyCastorTower> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR,G__setup_memfuncvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorTowercOallocatorlEMyCastorTowergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR),sizeof(vector<MyCastorJet,allocator<MyCastorJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR,G__setup_memfuncvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),sizeof(vector<MyJet,allocator<MyJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR,G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR),sizeof(vector<MyTrackJet,allocator<MyTrackJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR,G__setup_memfuncvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR),sizeof(vector<MyCaloTower,allocator<MyCaloTower> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR,G__setup_memfuncvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

